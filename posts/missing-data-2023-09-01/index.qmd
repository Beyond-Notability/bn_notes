---
title: "Missing data: a first look"
description: "Analysis of missing data in key information categories"
author: "Sharon Howard"
date: "2023-09-06"
date-modified: today
categories: 
  - missing
  - musthave
execute: 
  warning: false
  message: false
  echo: false 
---

## Wikibase queries

This brings together a number of different queries which are also used in [the summary table for all women](../../notes/women-summary-browser.html).

Relevant wikibase queries

- [Women with no dates](https://beyond-notability.wikibase.cloud/wiki/Project:SPARQL/examples#Women_with_no_dates)
- [Women with more than X statements but no date of birth/death](https://beyond-notability.wikibase.cloud/wiki/Project:SPARQL/examples#Women_with_more_than_X_statements_but_no_date_of_birth/death)
- [Uses of &lt;unknown value&gt;](https://beyond-notability.wikibase.cloud/wiki/Project:SPARQL/examples#All_uses_of_%3Cunknown_value%3E)

```{r libraries-etc}
# shared libraries, functions etc ####

source(here::here("_R/shared.R"))

# any extra libraries will usually go here 

library(naniar)

# standard query strings and queries ####

source(here::here("_R/std_queries.R"))

```


```{r get-stuff}

## count of pieces of info, based on example query
## (though doesn't count qualifiers as separate pieces)
bn_women_n_statements <-
  c(
    glue(bn_prefixes,
        "select distinct ?person ?statements
        where {{
         ?person bnwdt:P3 bnwd:Q3 ;
         wikibase:statements ?statements .
        {bn_filter_project}
        }}") 
  ) |>
  sparql2df(endpoint=bn_endpoint) |>
  make_bn_item_id(person)


## dates of birth and death
## atm simple date queries

bn_women_dobs <-
  c(
    glue(bn_prefixes,
        "select distinct ?person ?dateOfBirth
        where {{
         {bn_triple_woman}
        {bn_filter_project}
         ?person bnwdt:P26  ?dateOfBirth.
         {wb_service_label}
        }}") 
  ) |>
  sparql2df(endpoint=bn_endpoint) |>
  make_bn_item_id(person) |>
  mutate(date_of_birth = parse_date_time(dateOfBirth, "ymdHMS")) |>
  mutate(year_of_birth = year(date_of_birth)) |>
  relocate(bn_id, date_of_birth, year_of_birth) |>
  arrange( parse_number(str_remove(bn_id, "Q")), date_of_birth)


bn_women_dods <-
  c(
    glue(bn_prefixes,
        "select distinct ?person ?dateOfDeath
        where {{
         {bn_triple_woman}
        {bn_filter_project}
         ?person bnwdt:P15  ?dateOfDeath .
         {wb_service_label}
        }}") 
  ) |>
  sparql2df(endpoint=bn_endpoint) |>
  make_bn_item_id(person) |>
  mutate(date_of_death = parse_date_time(dateOfDeath, "ymdHMS")) |>
  mutate(year_of_death = year(date_of_death)) |>
  relocate(bn_id, date_of_death, year_of_death) |>
  arrange( parse_number(str_remove(bn_id, "Q")), date_of_death)


## SAL/RAI dates
## may need to separate these out

bn_sal_rai <-
c(paste(
  bn_prefixes,
  "SELECT ?person ?personLabel ?SALproposedLabel ?RAIproposedLabel  ?date 
WHERE
{
  {
  ?person bnwdt:P3 bnwd:Q3 .
  ?person bnp:P16 ?SALstatement .
  optional { ?SALstatement bnps:P16 ?SALproposed . }
  ?SALstatement bnpq:P1 ?date .
  }
  UNION
  {
  ?person bnwdt:P3 bnwd:Q3 .
  ?person bnp:P7 ?RAIstatement .
  ?RAIstatement bnps:P7 ?RAIproposed .
  ?RAIstatement bnpq:P1 ?date .
  }
    SERVICE wikibase:label {
      bd:serviceParam wikibase:language '[AUTO_LANGUAGE],en,en-gb'.
    }
}")) |>
  sparql2df(endpoint=bn_endpoint) |>
   make_bn_item_id(person) |>
  mutate(sal_rai = case_when(
    SALproposedLabel=="" & RAIproposedLabel=="" ~ "SAL",
    SALproposedLabel !="" ~ "SAL",
    RAIproposedLabel !="" ~ "RAI"
  ))  |>
  mutate(date_of_proposal = parse_date_time(date, "ymdHMS")) |>
  mutate(year_of_proposal = year(date_of_proposal)) |>
  relocate(bn_id, date_of_proposal, sal_rai) |>
  arrange( parse_number(str_remove(bn_id, "Q")), date_of_proposal)

## must-have IDs

bn_ids_musthave <-
  tribble(~id_type, ~id_abbr,
    "P34", "ADS",
    "P117", "WD",
    "P119", "VIAF",
    "P125", "ISNI"
    #"P134", "ALBS"
    )

bn_women_musthave_ids <-
bn_properties_musthave |>
  filter(property_type=="ExternalId") |>
  mutate(ID = glue("bnwdt:{bn_prop_id}")) |>
  summarise(bn_union = paste(ID, collapse = " | ")) |>
  # construct WHERE triples
  mutate(bn_triple_union = glue("?person ( {bn_union} ) ?id . ")) |>
  # construct the query string
  mutate(bn_query = glue(
    "{bn_prefixes} ",
    "select distinct ?person ?id ?id_type  where {{ ",
    "{bn_triple_woman} {bn_filter_project} ",
    "{bn_triple_union} ",
    "?person ?id_type ?id . }}"
  )) |>
  # make it a string
  pull(bn_query) |>
   sparql2df(endpoint=bn_endpoint) |>
   make_bn_item_id(person) |>
   mutate(id_type =  str_extract(id_type, "\\bP\\d+$")) |>
   relocate(bn_id, id_type) |>
   arrange( parse_number(str_remove(bn_id, "Q")) ) |>
     left_join(bn_ids_musthave, by="id_type") 

## women in cas indexes of archaeological papers
bn_women_cas_indexes <-
  c(
    glue(bn_prefixes,
        "select distinct ?person 
        where {{
         {bn_triple_woman}
         {bn_filter_project}
         ?person bnwdt:P76  bnwd:Q419 .
        }}")
  ) |>
  sparql2df(endpoint=bn_endpoint) |>
  make_bn_item_id(person) |>
  relocate(bn_id) |>
  arrange( parse_number(str_remove(bn_id, "Q")) )

bn_women_married_names_counts <-
c(paste(bn_prefixes,
  "SELECT ?person (COUNT(?marriedname) AS ?marriedcount)
WHERE {
  ?person bnwdt:P3 bnwd:Q3 . #select women
  FILTER NOT EXISTS {?person bnwdt:P4 bnwd:Q12 .} #filter out project team
  OPTIONAL {?person bnwdt:P141 ?marriedname .} #look for married name
}
group by ?person")) |>
  sparql2df(endpoint=bn_endpoint) |>
  make_bn_item_id(person) |>
  relocate(bn_id) |>
  arrange( parse_number(str_remove(bn_id, "Q")) )

bn_women_birth_names_counts <-
c(paste(
  bn_prefixes,
  "SELECT ?person (COUNT(?birthname) AS ?birthcount)
WHERE {
  ?person bnwdt:P3 bnwd:Q3 . #select women
  FILTER NOT EXISTS {?person bnwdt:P4 bnwd:Q12 .} #filter out project team
  OPTIONAL {?person bnwdt:P140 ?birthname .} #look for birth name
  
}
group by ?person ")) |>
  sparql2df(endpoint=bn_endpoint) |>
  make_bn_item_id(person) |>
  relocate(bn_id) |>
  arrange( parse_number(str_remove(bn_id, "Q")) )





## putting together the vitals:
## count of statements
## collapsed year of birth/death 
## collapse SAL/RAI year 
## musthave IDs - y=1 y*>1

bn_women_vitals <-
bn_women_list |>
  
  #left_join(bn_women_n_statements |> select(-person), by="bn_id") |>
  # don't use bn_women_dob_dod
  left_join(bn_women_dobs |> 
              #add_count(bn_id, name="n_dob") |>
              group_by(bn_id) |>
              arrange(year_of_birth, .by_group = TRUE) |>
              # nb summarise mucks up order again
              summarise(birth = paste(year_of_birth, collapse = " | ") ) |>
              #top_n(-1, date_of_birth) |>
              ungroup()  , by="bn_id") |>
  left_join(bn_women_dods |>
              group_by(bn_id) |>
              summarise(death = paste(year_of_death, collapse=" | ")) |>
              ungroup()  , by="bn_id") |>
  left_join(bn_sal_rai |>
              select(bn_id, date_of_proposal, sal_rai) |>
              mutate(year_of_proposal = year(date_of_proposal)) |>
              group_by(bn_id, sal_rai) |>
              arrange(year_of_proposal, .by_group = TRUE) |>
              summarise(year = paste(year_of_proposal, collapse = " | "), .groups = "drop_last") |>
              ungroup() |>
              pivot_wider(names_from = sal_rai, values_from = year)  , by="bn_id") |>
  left_join(bn_women_cas_indexes |> select(-person) |> mutate(CAS = "y"), by="bn_id") |>
  left_join(bn_women_musthave_ids |>
              count(bn_id, id_abbr) |>
              mutate(has_id = case_when(
                n==1 ~ "y",
                n>1 ~ "y*"
              )) |>
              select(-n) |>
              pivot_wider(names_from = id_abbr, values_from = has_id)  , by="bn_id" ) |>  
  left_join(bn_women_birth_names_counts |> select(-person), by="bn_id") |>
  left_join(bn_women_married_names_counts |> select(-person), by="bn_id") |>
  relocate(person, .after = last_col())






bn_women_vitals_shadow <-
bn_women_vitals |>
  select(-personLabel, -statements, -person) |>
  mutate(across(c(birthcount, marriedcount), ~if_else(.==0, NA, .), .names = "{.col}_na")) |>
  rename(death_date=death, birth_date=birth, married_name=marriedcount_na, birth_name=birthcount_na) 
#  bind_shadow(only_miss = TRUE) 

```


## Missing stats for the summary table variables 

```{r}
bn_women_vitals_shadow |>
  select(-bn_id, -birthcount, -marriedcount) |>
  miss_var_summary() |>
  kable(digits = 2) |> 
  kable_styling()
```

And as a chart.

```{r}
bn_women_vitals_shadow |>
  select(-bn_id, -birthcount, -marriedcount) |>
  gg_miss_var(show_pct = TRUE) +
  labs(title="Missing data", x=NULL)
```

## Comparison by birth dates

Of those with known birth date, compare missing data by birth period.

(Split to give fairly balanced numbers.)

```{r}
bn_women_vitals_shadow |>
  filter(!is.na(birth_date)) |>
  # get first birth year only if more than one
  mutate(birth_date = parse_number(str_extract(birth_date, "^\\d+"))) |> #count(birth_date)
  mutate(birth_p = case_when(
    between(birth_date, 1790, 1839) ~ "1790-1839",
    between(birth_date, 1840, 1864) ~ "1840-1864",
    between(birth_date, 1865, 1894) ~ "1865-1894",
    between(birth_date, 1895, 1925) ~ "1895-1921"
  )) |> #count(birth_p)
  filter(!is.na(birth_p)) |>
  # make decade
  #mutate(birth_date = birth_date - (birth_date %% 10))  |> count(birth_date)
  select(birth_p, death_date, SAL:VIAF, birth_name, married_name)  |>
  group_by(birth_p) |>
  miss_var_summary() |>
  ungroup()  |>
  mutate(variable = fct_rev(variable) ) |> 
  mutate(variable = fct_relevel(variable, "death_date", "birth_name", "married_name") ) |>
  ggplot(aes(variable, pct_miss)) +
  geom_col(width = 0.001, colour = "#484878", fill = "#484878") +
  geom_point(colour = "#484878", fill = "#484878") +
  coord_flip() +
  facet_wrap(~birth_p) +
  scale_color_discrete(guide = "none")  +
  scale_x_reordered() +
  labs(y="% missing", x=NULL, title = "Missing data, by birth period")
```


## Comparison of FSAs and non-FSAs


```{r}
bn_women_vitals_shadow |>
  mutate(SAL = if_else(is.na(SAL), "Other", "FSA")) |>
  select(SAL, birth_date, death_date, RAI:VIAF, birth_name, married_name)  |>
  group_by(SAL) |>
  miss_var_summary() |>
  ungroup()  |>
  mutate(variable = fct_rev(variable) ) |>
  mutate(variable = fct_relevel(variable, "death_date", "birth_name", "married_name") ) |>
  
  ggplot(aes(variable, pct_miss)) +
  geom_col(width = 0.001, colour = "#484878", fill = "#484878") +
  geom_point(colour = "#484878", fill = "#484878") +
  coord_flip() +
  facet_wrap(~SAL) +
  scale_color_discrete(guide = "none")  +
  scale_x_reordered() +
  labs(y="% missing", x=NULL, title = "Missing data, FSA and non-FSA")
```

## Comparison of RAIs and non RAIs

```{r}
bn_women_vitals_shadow |>
  mutate(RAI = if_else(is.na(RAI), "Other", "RAI")) |>
  select(RAI, birth_date, death_date, SAL, CAS:VIAF, birth_name, married_name)  |>
  group_by(RAI) |>
  miss_var_summary() |>
  ungroup()  |>
  mutate(variable = fct_rev(variable) ) |>
  mutate(variable = fct_relevel(variable, "death_date", "birth_name", "married_name") ) |>
  ggplot(aes(variable, pct_miss)) +
  geom_col(width = 0.001, colour = "#484878", fill = "#484878") +
  geom_point(colour = "#484878", fill = "#484878") +
  coord_flip() +
  facet_wrap(~RAI) +
  scale_color_discrete(guide = "none")  +
  scale_x_reordered() +
  labs(y="% missing", x=NULL, title = "Missing data, RAI and non-RAI")
```


