---
title: "Suffrage activities"
author: "Sharon Howard"
description: "Visualisations of suffrage activity in the BN database across time"
date: "2024-03-20"
date-modified: today
categories: 
  - ppa
execute: 
  warning: false
  message: false
  echo: false 
---

```{r finishing-up}
# finishing up: checked. RData suffrage-2024-03-18
# a couple of changes to text and modified data slightly. some colours issues should be fixed.
```

## Wikibase queries

* [Dates](https://beyond-notability.wikibase.cloud/wiki/Project:SPARQL/examples#Dates) section
* [Suffrage-related activities](https://beyond-notability.wikibase.cloud/wiki/Project:SPARQL/examples#Suffrage-related_activities)


```{r libraries-etc}
# shared libraries, functions etc ####

source(here::here("_R/shared.R"))

# any extra libraries will usually go here 

library(ggbeeswarm)
library(gghighlight)

# standard query strings and queries ####

source(here::here("_R/std_queries.R"))


# colorblind for activities... but don't go over 8...
# tableau for groups
# manual colours for buckets: positions, events, societies; money, publishing 
# based on tableau
bucket_colours <-
c(events="#1f77b4", 
  positions="#ff7f0e", 
  societies="#8c564b",   
  charitable="#17becf", 
  publishing="#EEcc66")


```

## Notes

> Amara and I are thinking about how women's involvement in organisations tagged in the database as instances of suffrage activity maps other things they were doing, and what is going on in terms of suffrage activities we've picked up on across time. We're not 100% sure what we want to do with this as yet, but as a starter to help us, do you think it might be possible, please, to do some visualisation that pulls together all flagged suffrage activity in our database across time? (We've also realised that some unflagged suffrage activity of event types has crept into the database so will aim to fix this, though we think all suffrage groups we know of are flagged.) Please note that we have also flagged anti-suffrage activity as suffrage activity, so preserving names of distinct suffrage orgs in whatever you come up with might be helpful. 

Nearly all the suffrage activities in the database are dated, though charts ignore differences in kinds of date - `positions` are usually at year level while `events` are more short term. (Though they're all point in time dates, I think, rather than start/end, so presumably none were of more than a year duration.)

### update

change from original version: "gave money to", which isn't in an existing PPA bucket, has been added to "charitable" rather than having its own bucket (and filtering out the handful of items in charitable). This slightly changes some charts. 


```{r}

# sub_io is so you know what kind of thing sub_ is - can be event, role, organisaiton...

# updated hopefully much faster query

bn_suffrage_sparql <- 
  'SELECT distinct ?person ?personLabel ?mainLabel ?subvalLabel ?ofLabel ?date ?date_prec ?sub_ioLabel ?subval ?of ?s 
WHERE {  
    ?person bnwdt:P3 bnwd:Q3 . #select women
    FILTER NOT EXISTS {?person bnwdt:P4 bnwd:Q12 .} #filter out project team

    ?person ?p ?s .
  
      ?s ?sub ?subval .
        ?main wikibase:claim ?p.
        ?main wikibase:statementProperty ?sub.   
  
  # sub_ i/o yes some do have suffrage activity. will be multi
    optional { ?subval bnwdt:P12 ?sub_io . #
              # maybe filter out suffrage itself
               # filter not exists { ?subval bnwdt:P12 bnwd:Q1166 . }
             }

  # union
   {
    # a qualifier (anywhere) has i/o suffrage activity
       ?s bnpq:P12 bnwd:Q1166.
    }
  
# what about a main rather than qualifier having i/o suffrage activity? i dont think there are any atm but could be.
 # union
 #   { # this might find extra linked i/o suffrage but im not sure it works.
 #     ?subval bnwdt:P12 bnwd:Q1166 .
 #     }
  
  union
  
    {
     # a qualifier *does* have i/o suffrage activity. i think!
      ?s ?pq ?qual .
        ?qual bnwdt:P12 bnwd:Q1166 .
      
      } # /union
  
  optional { ?s bnpq:P78 ?of. }  # outside the union seems speedier
  
  optional { 
    # date qualifiers. 
        ?s ?dpq ?qual_date .   
          ?qual_date wikibase:timeValue ?date .
          ?qual_date wikibase:timePrecision ?date_prec .
  }
  

  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". }

}
order by ?personLabel ?mainLabel'

bn_suffrage_query <-
  bn_std_query(bn_suffrage_sparql) |>
  make_bn_item_id(person) |>
  make_bn_ids(c(subval, of, s)) |>
  mutate(across(c(date, of, mainLabel, subvalLabel, ofLabel, sub_ioLabel, subval), ~na_if(., ""))) |>
  relocate(person, .after = last_col())



bn_suffrage <-
bn_suffrage_query |>
  make_date_year() |>
  relocate(year, .after = date) |>
  filter(!sub_ioLabel %in% c("suffrage activity")) |> 
  mutate(sub_type = case_when(
    sub_ioLabel %in% c("event", "organisation", "role") ~ sub_ioLabel,
    str_detect(sub_ioLabel, "organisation") ~ "organisation",
    sub_ioLabel=="committee" ~ "organisation",
    subvalLabel=="event" ~ subvalLabel,
    mainLabel=="held position" ~ "role"
  )) |>
  mutate(org = case_when(
    !is.na(ofLabel) ~ ofLabel,
    sub_type=="organisation" ~ subvalLabel
  ))   |>
  left_join(bn_ppa_buckets |> select(ppa, bucket= label), by=c("mainLabel"="ppa")) |>
  mutate(bucket = case_when(
    bucket=="event participation" ~ "events",
    bucket=="charitable/organisational" ~ "charitable",
    is.na(bucket) & mainLabel=="gave money to" ~ "charitable",
    .default = bucket
  )) |>
  # adjust for additional activities since original processing...
  # now a couple with only 1 instance, drop them to keep to 8.
  # but need to update colours?
  # keep an eye on unexpected NAs
  filter(!is.na(bucket)) |>
  relocate(sub_type, org, bucket, .after = ofLabel) |>
  rename(activity=mainLabel) |>
  left_join(bn_women_dob_dod |> select(-person, -personLabel), by="bn_id")
```





## Types of activity


```{r}
bn_suffrage |>
  filter(!is.na(date)) |>
  # add_count(bn_id) |>
  # filter(n>1) |>
  count(bucket) |>
  #filter(bucket !="money") |>
  mutate(bucket = fct_reorder(bucket, -n)) |>
  ggplot(aes(x=bucket, y=n, fill=bucket)) +
  geom_col() +
  #facet_wrap(~bucket) +
  #scale_fill_tableau()
  scale_fill_manual(values = bucket_colours) +
  labs(y="count")

```




A beeswarm of activity types grouped by PPA buckets. [excluding the buckets with only one or two instances]

- most activity (unsurprisingly!) is between 1908 and 1913 (about 2/3 of dated activities)
- underlining the intensity of suffrage politics in that period, `events` are particularly clustered there; `positions` also peak in the same period, but they're more spread out. 


```{r}
# bn_suffrage |>
#   filter(!bucket %in% c("money", "publishing")) |>
#   filter(!is.na(year)) |>
#   count(year)
```



```{r}

# named vector of colours for variable values
# make_named_colours <- function(df, grpname, grpcols){
# get rows in required order before using this (this sorts by frequency; could make another version for random/uncounted etc) and then add rowid
# grpname is the name of the group or bucket in the group col
# **grpcols has to be a vector of colour codes** - sthg like viridis_pal()(16)  will work, just have to have enough colours. may need to reverse direction to stop the first one being white grr.

# c(events="#1f77b4", 
#   positions="#ff7f0e", 
#   societies="#8c564b",   
#   charitable="#17becf") # was money

# could probably add the counts programmatically too... in fact haven't i done that somewhere?
g1 <- colorRampPalette(c('#1f77b4', '#071926'))(6)

g2 <- colorRampPalette(c("#ff7f0e", "#361b03"))(6)

g3 <- colorRampPalette(c("#8c564b", "#612013"))(4)

g4 <- c("#17becf", "#467b80")




suffrage_group_activities_colours <-
  bn_suffrage |>
  filter(!is.na(year)) |>
  rename(colour_category=activity, group=bucket)

group_1 <-
  suffrage_group_activities_colours|>
  filter(group =="events") |>
  make_named_colours("events", g1)

group_2 <-
suffrage_group_activities_colours |>
  filter(group=="positions") |>
  make_named_colours("positions", g2)

group_3 <-
suffrage_group_activities_colours |>
  filter(group=="societies") |>
  make_named_colours("societies", g3)

group_4 <-
suffrage_group_activities_colours |>
  filter(group=="charitable") |>
  make_named_colours("charitable", g4)


# the final named vector 
grouped_colours <-
  c(group_1, group_2, group_3, group_4)

```



```{r warning=FALSE}
bn_suffrage |>
  # drop publishing
  filter(!bucket %in% c("publishing")) |> 
  left_join(
    enframe(grouped_colours, name="activity") |>
      left_join(bn_suffrage |> distinct(bucket, activity), by="activity") |>
      arrange(bucket) |>
      rowid_to_column("sort_activity") |>
      select(activity, sort_activity), by="activity"
  ) |>
  filter(!is.na(year)) |>
  arrange(bucket, activity) |>
  mutate(bucket = fct_rev(bucket)) |>
  mutate(activity = fct_reorder(activity, sort_activity)) |>
  ggplot(aes(date, bucket, colour=activity)) +
  geom_beeswarm(size=1, method = "hex", cex=2) +
  scale_colour_manual(values = grouped_colours) +
  labs(y=NULL)
```



## Women

48 women represented here; 21 have more than one activity recorded.

```{r}
#bn_suffrage |> count(bn_id, sort=T)
```


```{r}
bn_suffrage |> 
  add_count(bn_id, name="n_bn") |>
  count(bn_id, personLabel, bucket, n_bn, sort = T) |>
  mutate(personLabel =fct_reorder(personLabel, n_bn)) |>
  ggplot(aes(n, personLabel, fill=bucket)) +
  geom_col() +
  scale_fill_manual(values = bucket_colours) +
#  scale_fill_ptol() +
  labs(y=NULL, x="number of actions")
```


```{r}
## TIL  cur_group_id() to give a number ID to each group in a grouped DF, hallelujah!
# df |>
#   group_by(group) |>
#     mutate(id = cur_group_id()) |>
#   ungroup()
```





```{r}
bn_suffrage_ages <-
bn_suffrage |>
  filter(!is.na(date)) |>
  mutate(grp_id = cur_group_id(), .by = bn_id) |>
  add_count(bn_id, name="n_grp") |>
  mutate(group = case_when(
    n_grp==1 ~ "1",
    n_grp>1 ~ "2+"
  ))  |>
  mutate(age = year-bn_dob_yr) |>
  mutate(earliest = min(year), latest=max(year), .by = bn_id) |>
  mutate(started = case_when(
    earliest < 1908 ~ "early",
    .default = "late"
  )) |>
  # first and last dates overall, for limits if doing by date
  mutate(start_date = min(date)- years(1), end_date = max(date) + years(1))  |>
  # age info
  mutate(age_earliest = earliest-bn_dob_yr, 
         age_latest=latest-bn_dob_yr, 
         age_at = year-bn_dob_yr, 
         age_start=0) |>
  relocate(date, year, bn_dob, bn_dob_yr, earliest, latest, age_earliest, age_latest, age_at) 


## much simpler to use geom_point instead of geom_linerange
  # do fct_ reordering (and filtering etc) as needed

# this uses dates instead of years for earliest/latest
bn_suffrage_barcode <-
bn_suffrage |>
  filter(!is.na(date)) |>
  # first and last dates overall, for limits
  mutate(start_date = min(date)- years(1), end_date = max(date) + years(1))  |>
  group_by(personLabel) |> 
  mutate(earliest = min(date), latest=max(date)) |>
  ungroup()
```


```{r}
# customise tick marks
  #theme(axis.ticks.y=element_blank() ) + # hide them altogether
  #axis.ticks.y = element_line(linewidth = 0.2, color="lightgrey") , 
  #axis.ticks.length.y = unit(.1, "cm") 
```

Beeswarms don't work well in this case because the concentration of activity in a small number of years makes it impossible to avoid them overlapping too much to make any sense. Instead I've tried out "barcode" charts to chart timelines. 

Each vertical bar represents one date for which a suffrage activity is recorded (making no distinction between types of date). Unlike a beeswarm it won't show every single data point if there's more than one on the same date, but it's possible to make more data points visible than with chunkier shapes like dots or squares, and it will indicate more intense clusters of activity (both horizontally, for individuals, and vertically, for the group as a whole).

- order by date of earliest activity

```{r}
bn_suffrage_barcode |> 
  mutate(personLabel=fct_rev(fct_reorder(personLabel, earliest))) |>
  ggplot(aes(y=personLabel, x=date)) +
  geom_segment( aes(x=start_date, xend=latest, yend=personLabel), linewidth=0.2, colour="lightgrey") +
  #geom_linerange(linewidth=0.5) +
    geom_point(shape = 124, size = 2.5, colour="black") +
  scale_x_datetime(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(axis.ticks.y=element_blank() ) +
  #scale_color_colorblind() +
  #theme(legend.position = "bottom") +
  labs(y=NULL)
```

- order by date of birth

```{r}
bn_suffrage_barcode |> 
  filter(!is.na(bn_dob)) |>
  mutate(personLabel=fct_rev(fct_reorder(personLabel, bn_dob))) |>
  ggplot(aes(y=personLabel, x=date)) +
  geom_segment( aes(x=start_date, xend=latest, yend=personLabel), linewidth=0.2, colour="lightgrey") +
  #geom_linerange(linewidth=0.5) +
    geom_point(shape = 124, size = 2.5, colour="black") +
  scale_x_datetime(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(axis.ticks.y=element_blank() ) +
  #scale_color_colorblind() +
  #theme(legend.position = "bottom") +
  labs(y=NULL)
```






If only a single event needs to be plotted, a lollipop chart is also quite effective. 


```{r}
#might be useful to add year of birth so you can get a sense of "generations" (suspect later arrivals will be largely younger women?)
# lol can't use geom_lollipop because it starts at 0 and there's no way to change it.
bn_suffrage_barcode |> 
  add_count(bn_id) |>
  filter(n==1) |>
  mutate(personLabel = fct_reorder(personLabel, desc(date))) |>
  ggplot(aes(y=personLabel, x=date)) +
  geom_segment( aes(x=start_date, xend=latest, yend=personLabel, colour=bucket), show.legend = F, linewidth=0.5) +
  geom_point(aes(colour=bucket), size=1.5) +
  scale_x_datetime(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(axis.ticks.y=element_blank() ) +
  #scale_color_tableau() +
  scale_colour_manual(values = bucket_colours) +
  theme(legend.position = "bottom") +
  labs(y=NULL, x=NULL, title = "Women with only one recorded activity")
```

And a dumbbell plot for the earliest and latest activities by each woman. There isn't that much overlap (among women with more than 1 activity) between women who were active before 1908 and those who started 1908 or later. (But is this an absence, or just absence of data?) I'm not familiar enough with the historiography to know whether this might be expected; if not, handle with caution.

```{r}
bn_suffrage_barcode |>
    mutate(personLabel = fct_reorder(personLabel, desc(earliest))) |>
  ggplot(aes(y=personLabel)) +
  geom_dumbbell(aes(x=earliest, xend=latest), size_x = 1.5, size_xend = 1.5) +
  labs(y=NULL, x=NULL, title = "Earliest and latest activity")
```


Separating out women with at least 2 activities

- ordered by date of earliest activity

```{r}
bn_suffrage_barcode |>  
  add_count(bn_id) |> filter(n>1) |>
  mutate(personLabel = fct_rev(fct_reorder(personLabel, earliest))) |>
  ggplot(aes(y=personLabel, x=date, colour=bucket)) +
  geom_segment( aes(x=start_date, xend=latest, yend=personLabel), linewidth=0.2, colour="lightgrey") +
 # geom_linerange(linewidth=0.5) +
  geom_point(shape = 124, size = 4) +
  scale_x_datetime(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(axis.ticks.y=element_blank() ) +
  #geom_point(aes(x=bn_dob), colour="black", show.legend = F, shape="asterisk") +
  scale_colour_manual(values = bucket_colours) +
  theme(legend.position = "bottom") +
  labs(y=NULL, x=NULL, title="Women with at least two recorded activities")
```


There is a noticeable difference in activity types between the women with 1 activity and those with 2+. Going back to the earlier chart of PPA bucket counts, this version separates out the two groups but also shows the totals in light grey in the background - `positions` and `societies` are both quite evenly split between group 1 and group 2, but the 2+ women are much more involved in `events` (= mainly `spoke at`). 

```{r}
bn_suffrage |>
  filter(!is.na(date)) |>
  add_count(bn_id, name="n_grp") |>
  mutate(group = case_when(
    n_grp==1 ~ "1",
    n_grp>1 ~ "2+"
  )) |> 
  filter(bucket !="money", bucket !="publishing") |>
  count(group, bucket) |>
  mutate(bucket = fct_reorder(bucket, -n)) |> 
  ggplot(aes(x=bucket, y=n, fill=bucket)) +
  geom_col(show.legend = F) +
  gghighlight(unhighlighted_params = list(linewidth = 1, fill = alpha("grey", 0.4))) +
  facet_wrap(~group) +
  #scale_fill_tableau()
  scale_fill_manual(values = bucket_colours)

```

**update December 2024**: with the addition of more data, initial observations here no longer hold; median and mean ages for each group are now virtually identical. 


```{r}
# average yob - would expect them to be born earlier, more time to get going!
# bn_suffrage |>
#   filter(!is.na(date)) |>
#   add_count(bn_id, name="n_grp") |>
#   mutate(group = case_when(
#     n_grp==1 ~ "1",
#     n_grp>1 ~ "2"
#   )) |>
#   group_by(group) |>
#   summarise(mn_yob = mean(bn_dob_yr), med_yob= median(bn_dob_yr)) |>
#   ungroup()
```


```{r}
 bn_suffrage_ages |>
  filter(!is.na(bn_dob)) |>
   filter(date == min(date), .by=bn_id) |> #count(group, started)
  # group_by(group) |>
  # summarise(#mn_e = mean(earliest), med_e=median(earliest),
  #           mean_age_earliest= mean(age_earliest), median_age_earliest= median(age_earliest)) |>
  # ungroup()
  ggplot(aes(x=group, y=age_earliest, group=group, fill=group)) +
  geom_boxplot(varwidth = T, show.legend = F) +
#  facet_wrap(~started) +
  #geom_beeswarm() +
  scale_fill_tableau() +
  labs(y="age at earliest activity", title = "Boxplot of age at earliest activity")


```


```{r}
# bn_suffrage_ages |>
#   filter(date == min(date), .by=bn_id) |> #count(group, started)
#   ggplot(aes(x=group, y=age_earliest, group=group, fill=group)) +
#   geom_boxplot(varwidth = T, show.legend = F) +
#   facet_wrap(~started) +
#   #geom_beeswarm() +
#   scale_fill_ptol() +
#   labs(y="age at earliest activity")
```


Lollipop chart of ages at earliest activity, sorted by *date* of the earliest activity, and coloured by group (1 or 2+ activities).

```{r}
# lollipop of age of first activity coloured by group 1/2
# sorted by date of first activity
bn_suffrage_ages |>
  filter(!is.na(bn_dob)) |>
  filter(date == min(date), .by=bn_id) |>
  mutate(personLabel = fct_reorder(personLabel, desc(earliest))) |>
  ggplot(aes(y=personLabel, x=age_at, colour=group, label=earliest)) +
  geom_text(show.legend = F, size=3, nudge_x = 3) +
  geom_lollipop(horizontal = T, point.size = 1.5) +
  #geom_segment( aes(x=age_start, xend=age_latest, yend=personLabel), linewidth=0.2, colour="lightgrey") +
  #geom_linerange(linewidth=0.5) +
  scale_x_continuous(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(axis.ticks.y=element_blank() ) +
  scale_color_tableau() +
  #theme(legend.position = "bottom") +
  labs(y=NULL, x="age", title = "Age at earliest recorded activity")
```



## Organisations and types of activity

23 distinct organisations (not all activities are associated with a named organisation).

```{r}
bn_suffrage |>  #filter(!is.na(org)) |> count(activity)
  #filter(!is.na(org)) |> count(org)
  filter(!activity %in% c("attended", "founded")) |>
  add_count(org, name="n_org") |>
  count(org, activity, n_org) |>
  filter(!is.na(org)) |> 
  mutate(org = fct_reorder(org, n_org)) |>
  ggplot(aes(org, n, fill=activity)) +
  geom_col() +
  coord_flip() +
  scale_fill_colorblind() +
  scale_y_continuous(labels = number_format(accuracy = 1)) +
  # new legend.location option
  theme(legend.position = "bottom", legend.location = "plot") +
  labs(x=NULL, y="count")
```



There's perhaps even less overlap between pre-1908 and 1908- organisations than for the women themselves. (It looks as though local and regional organisations are only present in the earlier period.)

```{r}
bn_suffrage |> 
  add_count(org, name="n_org") |>
  count(org, year, n_org) |>
  filter(!is.na(org) & !is.na(year)) |>
  group_by(org) |>
  mutate(label = cur_group_id()) |>
  mutate(latest = max(year), earliest=min(year)) |>
  ungroup() |>
  mutate(start_year=min(year)) |>
  mutate(org = fct_reorder(org, desc(earliest))) |>
  ggplot(aes(y=org)) +
  #geom_segment(aes(yend=org, x=start_year, xend=latest), linewidth=0.2, colour="lightgrey") +
  geom_dumbbell(aes(x=earliest, xend=latest)) +
  labs(y=NULL, x=NULL, title = "Earliest and latest dates for organisations")
```




## Table


```{r}

bn_suffrage_reactable <-
bn_suffrage |>
  arrange(personLabel, date) |>
  mutate(description = case_when(
    str_detect(subvalLabel, "^t\\d") & !is.na(org) ~ org,
    is.na(org) ~ subvalLabel,
    subvalLabel==org ~ org,
    subvalLabel %in% c("meeting", "committee", "event") ~ paste(subvalLabel, org, sep=" of "),
    activity %in% c("was member of") ~ org,
    activity %in% c("held position", "served on")  ~ paste(subvalLabel, org, sep=" of ")
  )) |>
  select(bn_id, personLabel, bn_dob_yr, year , activity, description, person) 
#  mutate(across(c(-bn_id, -personLabel), ~replace_na(.,"-"))) |>


reactable(
  bn_suffrage_reactable |> select(-person) ,
  filterable = TRUE,
  searchable = TRUE,
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 130,
  #groupBy = "event",
  defaultExpanded = TRUE,
  defaultColDef = colDef(maxWidth = 60),  # , headerClass = "sticky" but i think it has to be fixed height to use this
  columns = list(
    bn_id = colDef(name="id", maxWidth = 70),
    personLabel =colDef(maxWidth = 250, name="name",
      html = TRUE,
      cell = function(value, index) {
        sprintf('<a href="%s" target="_blank">%s</a>', bn_suffrage_reactable$person[index], value)
      })   ,
    bn_dob_yr = colDef(maxWidth = 60, name = "birth"),
   activity = colDef(maxWidth = 120),
    # collegeLabel = colDef(maxWidth = 250, name="college",
    #   html = TRUE,
    #   cell = function(value, index) {
    #     sprintf('<a href="%s" target="_blank">%s</a>', bn_fsa_education$college[index], value)
    #   })   ,  # TODO work out how to make this conditional
  description = colDef(maxWidth = 250),
   bucket=colDef(minWidth = 100)
    
  )
)
```