---
title: "Work activities: Lecturing"
author: "Sharon Howard"
description: "Are there trends in freelance vs extension lecturing?"
date: "2024-04-09"
date-modified: today
categories: 
  - ppa
  - work
execute: 
  warning: false
  message: false
  echo: false 
---

```{r finishing-up}
# finishing up: checked. RData  lecturers-2024-04-09
```

## Wikibase queries

* [Lecturers](https://beyond-notability.wikibase.cloud/wiki/Project:SPARQL/examples#Lecturers)
* [Spoke at](https://tinyurl.com/2ayfry5d)

```{r libraries-etc}
# shared libraries, functions etc ####

source(here::here("_R/shared.R"))

# any extra libraries will usually go here 

#library(ggbeeswarm)
#library(gghighlight)

# standard query strings and queries ####

source(here::here("_R/std_queries.R"))

```

## Notes

I've added `spoke at` data for some comparisons, but only for the women in this lecturer subset, not the whole lot.

updates

- added heatmap of regional distribution of posts; and a heatmap excluding London
- added tables of the counts in the heatmap


```{r lecturers-query}
##query without date property labels

bn_lecturers_sparql <- 
'SELECT distinct ?person ?personLabel ?workLabel  ?positionLabel ?locationLabel
?date ?date_precision ?pq
?organisedLabel ?ofLabel 
?position ?of  ?work ?organised ?location
?s

WHERE {
    
  ?person bnwdt:P3 bnwd:Q3 . # women
  
  # work activities: held position / held position (free text) /  employed as
  #?person ( bnp:P17|bnp:P48|bnp:P105 ) ?s .  
  
  ?person ?work_p ?s . # for activity type label
    ?work wikibase:claim ?work_p .  

    ?s ?bnps ?position .  
    # freelance and extension lecturing (q701 and q3021)
    { ?s ?bnps bnwd:Q701  . } union { ?s ?bnps bnwd:Q3021 .  }
  
    # employer / organised by / of (incl free text). 
    # dont appear to be any employer for this subset
    #OPTIONAL { ?s bnpq:P18 ?employer .}  
    OPTIONAL { ?s bnpq:P109 ?organised .}
    OPTIONAL { ?s ( bnpq:P78 | bnpq:P66 ) ?of .}
 
    optional { ?s bnpq:P2 ?location . } # multis
    
  # dates - get precision here because some are almost certainly yyyy
    optional {
      ?s (bnpqv:P1 | bnpqv:P27 | bnpqv:P28  ) ?pqv.
      ?s ?pq ?pqv . # just gets the uri but doesnt seem to cause dups
         ?pqv wikibase:timeValue ?date .  
         ?pqv wikibase:timePrecision ?date_precision .
      
      # doesnt seem to make much difference to time here, but does change number of results
      #?s ?pq ?date .   
      #    ?date_prop wikibase:qualifier ?pq .
      #    ?date_prop wikibase:propertyType wikibase:Time.  
      
      } # /dates
   
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
  
} # /where

ORDER BY ?person
'

bn_lecturers_query <-
  bn_std_query(bn_lecturers_sparql) |>
  make_bn_item_id(person) |>
  make_bn_ids(c(pq, position, of, work, organised, location, s)) |>
  mutate(across(c(organisedLabel, ofLabel, of, organised, locationLabel, location, pq), ~na_if(., ""))) |>
  make_date_year() |>
  # add the date property labels
  mutate(date_propLabel = case_when(
    pq=="P1" ~ "point in time",
    pq=="P27" ~ "start time",
    pq=="P28" ~ "end time"
  )) |>
  rename(date_prop=pq)  |>
  relocate(person, .after = last_col())

# without locations
bn_lecturers_dates <-
bn_lecturers_query |>
  filter(!is.na(date)) |>
  select(bn_id, personLabel, date, date_propLabel, year, date_precision, positionLabel, organisedLabel, ofLabel, organised, of, position, work, s) |>
  # group by / top n to discard any extras before pivot
  #top_n -1 for the first of multi rows. arrange by date to ensure this is the earliest.
  group_by(s, date_propLabel) |>
  arrange(date, .by_group = T) |>
  top_n(-1, row_number()) |>
  ungroup() |>
  pivot_wider(names_from = date_propLabel, values_from = c(date, date_precision, year)) |>
  # don't forget this will rename *all* the camelCase columsn...
  clean_names("snake") |>
  #not sure why r prefixes all the pivoted cols 
  rename_with(~str_remove(., "^date_"), starts_with("date_")) |>
  mutate(start_date = if_else(!is.na(point_in_time), point_in_time, start_time)) |>
  mutate(year1 = if_else(!is.na(year_point_in_time), year_point_in_time, year_start_time)) |>
  make_decade(year1) |>
  relocate(end_time, .after = start_time) |>
  relocate(year_end_time, .after = year_start_time) |>
  mutate(end_date = case_when(
    !is.na(end_time) ~ end_time,
    !is.na(point_in_time) ~ point_in_time,
    !is.na(start_time) ~ start_time
  )) |>
  mutate(precision = case_when(
    precision_end_time>precision_start_time ~ precision_end_time,
    !is.na(precision_start_time) ~ precision_start_time,
    !is.na(precision_point_in_time) ~ precision_point_in_time
  )) |>
  # consolidate of/organised by; "none recorded" for NA if extension.
  mutate(organisation = case_when(
    !is.na(of_label) ~ of_label,
    !is.na(organised_label) ~ organised_label,
    #position=="Q701" ~ "none (freelance)",
    .default = "none recorded"
  )) |>
  relocate(organisation, .after = of) |>
  mutate(is_mm = if_else(bn_id=="Q569", "MM", "other")) |>
  arrange(person_label,  start_date) |> 
  left_join(bn_women_dob_dod, by="bn_id") |>
  relocate(s, .after = last_col()) 
```


```{r spoke-at}
# relationship to spoke at ?

bn_spoke_at_sparql <- 
  '
SELECT distinct ?person ?personLabel ?ppaLabel ?ofLabel ?date ?date_precision   ?ppa ?pqq  ?of
?s

WHERE {  
  ?person bnwdt:P3 bnwd:Q3 .
  ?person bnp:P23  ?s .
    ?s bnps:P23  ?ppa .  
          
  # of qualifier
   optional { 
     ?s ( bnpq:P78|bnpq:P66	 ) ?of . 
     #?s ?of_p ?of .  # weird, this adds a single extra row for a P2. why only the one? not essential anyway.
     #?of_prop wikibase:qualifier ?of_p . 
    }
    
  # dates with precision. theres only one end time so ignore that for now.  | bnpqv:P28
    #optional {
      ?s (bnpqv:P1 | bnpqv:P27  ) ?pqv.
      ?s ?pqq ?pqv . # just gets the uri 
         ?pqv wikibase:timeValue ?date .  
         ?pqv wikibase:timePrecision ?date_precision .
    #  }
      
   
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
  
} # /where

ORDER BY ?person ?s'


bn_spoke_at_query <-
  bn_std_query(bn_spoke_at_sparql) |>
  make_bn_item_id(person) |>
  make_bn_ids(c(ppa, pqq, of, s)) |>
  mutate(across(c(pqq, of, ofLabel, pqq), ~na_if(., ""))) |>
  make_date_year() |>
  # add the date property labels
  mutate(date_propLabel = case_when(
    pqq=="P1" ~ "point in time",
    pqq=="P27" ~ "start time",
    pqq=="P28" ~ "end time"
  )) |>
  rename(date_prop=pqq, person_label=personLabel)  |>
  select(-person)



## only 4 without date, so drop the optional
# only 3 not p.i.t. only 1 end time. it's only 1 month. drop as well
# how did that P2 get back in there!! hmm.
# a few multi org and a few  more than one date. top n for now.
# bn_spoke_at_query |>
#   add_count(s) |>
#   arrange(bn_id, s) |> relocate(s) |>
#   filter(n>1) 

bn_spoke_at <-
  bn_spoke_at_query |>
  group_by(s) |>
  top_n(1, row_number()) |>
  ungroup() |>
  rename(start_date=date, year1=year, precision=date_precision) |>
  make_decade(year1) |>
  mutate(position_label="spoke at", position="P23") |>
  semi_join(bn_lecturers_dates, by="bn_id") |>
  mutate(organisation = case_when(
    !is.na(ofLabel) ~ ofLabel,
    ppaLabel %in% c("event", "meeting") & is.na(ofLabel) ~ "none recorded",
    !is.na(ppaLabel) ~ ppaLabel, 
    is.na(ppaLabel) & is.na(ofLabel) ~ "none recorded"
  )) |>
  mutate(is_mm = if_else(bn_id=="Q569", "MM", "other"))
```


```{r locations-regions}
source(here::here("_R/mapping.R"))

## which things to use for locations?
## location; organised by; of


bn_lecturers_locations <-
bn_lecturers_query |>
  distinct(bn_id, personLabel, locationLabel, organisedLabel, ofLabel, location, organised, of, s) 
# there may be multiple locations for an s but it shouldn't matter unless they end up in different regions/sub-regions


# pivot longer to put all potential locatables into a single find_loc col
bn_lecturers_loc_id_long <-
  bn_lecturers_locations |>
  pivot_longer(c(location, organised, of), names_to = "find_loc_type", values_to = "find_loc_id", values_drop_na = TRUE) |>
  mutate(find_loc_label = case_when(
    find_loc_type=="location" ~ locationLabel,
    find_loc_type=="organised" ~ organisedLabel,
    find_loc_type=="of" ~ ofLabel
  )) |>
  select(bn_id, find_loc_type, find_loc_id, find_loc_label, s)

# bn_make_union for VALUES
bn_lecturers_loc_id_values <-
bn_lecturers_loc_id_long |>
  bn_make_union(find_loc_id) 


# which find_loc_id items have io locality ####

## questions for first run. 
## - are there any arch.site/hist.house? may need an extra query 

bn_p12_spql <-
  'select distinct ?item ?itemLabel ?ioLabel
  where {
    values ?item { <<bn_bnwd_values>> }
    ?item bnwdt:P12 ?io .
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
  }' 

bn_lecturers_p12_sparql <-
  bn_lecturers_loc_id_values |>
  mutate_glue_sparql(bn_p12_spql)


bn_lecturers_p12_query <-
  bn_std_query(bn_lecturers_p12_sparql) |>
  make_bn_ids(item)


bn_lecturers_p12 <-
bn_lecturers_p12_query |>
  group_by(item, itemLabel) |>
  arrange(ioLabel, .by_group = TRUE) |>
  summarise(ios = paste(ioLabel, collapse = " | "), .groups = "drop_last" ) |>
  ungroup() |>
  left_join(
  bn_lecturers_p12_query |>
  filter(ioLabel=="locality") |>
    mutate(has_locality="y") |>
    select(item, has_locality), by="item")


# add locality to _loc_id
bn_lecturers_loc_id_long_locality <-
bn_lecturers_loc_id_long |>
  left_join(bn_lecturers_p12, by=c("find_loc_id"="item")) 




## set up IDs with io locality for later p33 query.  what?
bn_lecturers_has_locality <-
bn_lecturers_loc_id_long_locality |>
  filter(!is.na(has_locality)) |>
  distinct(find_loc_id, find_loc_label) |>
  mutate(p33_id=find_loc_id, p33_label=find_loc_label)
  #inner_join(bn_lecturers_p12 |> filter(!is.na(has_locality)) , by=c("find_loc_id"="item")) |> # shouldn't need this



## set up IDs without io locality for p2 queries.
bn_lecturers_not_locality_values <-
bn_lecturers_p12 |>
  filter(is.na(has_locality)) |>
  bn_make_union(item)


# get p2 (with io) for non-locality quals ####

# questions for first run
# - do any p2 not have io locality?  if none, you don't need p2p2
# - does p2p2 work for non locality?
# - can run checks for P33 instead of P2, or p2p33, but very unlikely to get anything new.

bn_p2_spql <-
  'select distinct ?item ?itemLabel ?p2 ?p2Label ?p2_ioLabel ?p2p2Label ?p2p2
  where {
    values ?item { <<bn_bnwd_values>> }
    ?item bnwdt:P2 ?p2 .
      ?p2 bnwdt:P12 ?p2_io .
      optional { ?p2 bnwdt:P2 ?p2p2 . }
        
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
  }' 

bn_lecturers_p2_sparql <-
  bn_lecturers_not_locality_values |>
  mutate_glue_sparql(bn_p2_spql)


bn_lecturers_p2_query <-
  bn_std_query(bn_lecturers_p2_sparql) |>
  make_bn_ids(c(item, p2, p2p2)) |>
  mutate(across(c(p2p2, p2p2Label), ~na_if(., "")))

## check: are there any items with multi localities and what effect will collapsing them have.

# choose p2/p2p2 for p33id
bn_lecturers_p2 <-
bn_lecturers_p2_query |>
  mutate(p33_id = case_when(
    p2_ioLabel=="locality" ~ p2,
    .default = p2p2 
  )) |>
  mutate(p33_label = case_when(
    p2_ioLabel=="locality" ~ p2Label,
    .default = p2p2Label
  )) |>
  # distinct because there were some multi i/o
  distinct(p33_id, p33_label, item, itemLabel) |> 
  filter(!is.na(p33_id)) |> # 5 rows
  rename(find_loc_id=item, find_loc_label=itemLabel) |>
  # occasionally more than 1 location: pick 1
  group_by(find_loc_id) |>
  top_n(1, row_number()) |>
  ungroup()


## check: how many locations have been omitted due to absence of P2/P33 info? If there are a lot it may be worth trying wikidata for admin territory/historic county/region data.

# combine p2 with original io locality 
bn_lecturers_p33_ids <-
bind_rows(
  bn_lecturers_p2 |> mutate(src="p2"),
  bn_lecturers_has_locality |> mutate(src="p33")
  ) |>
  arrange(find_loc_id) 



bn_lecturers_p33_values <-
bn_lecturers_p33_ids |>
  bn_make_union(p33_id)


# add uk regions. don't think this is helpful tbh.
# check that any dropped are non-UK. IT DROPS STUFF THAT IS A REGION EG WALES. YOU NEED THE P33 QUERY FOR FUCK SAKE.
# check for any multis
# bn_lecturers_p33_ids_regions <-
# bn_lecturers_p33_ids |>
#   inner_join(bn_regions_localities |> select(-itemLabel, -ioLabel), by=c("p33_id"="item"))


# get UK region for the p33s.####
# p33_ids_regions may not have everything
# spql
bn_p33_spql <-
  'SELECT distinct ?item ?itemLabel ?region ?regionLabel
  WHERE {
    VALUES ?item { <<bn_bnwd_values>> }
    ?item bnwdt:P33* ?region .
      ?region bnwdt:P12 bnwd:Q4207 .
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". }
  }'

# sparql.
bn_lecturers_p33_sparql <-
  bn_lecturers_p33_values |>
  mutate_glue_sparql(bn_p33_spql)

# query
bn_lecturers_p33_query <-
  bn_std_query(bn_lecturers_p33_sparql) |>
  make_bn_ids(c(item, region))




# check: no unexpected m2m

bn_lecturers_loc_linked <-
bn_lecturers_loc_id_long_locality |>
  left_join(bn_lecturers_p33_ids |> select(find_loc_id, p33_id, p33_label), by=c("find_loc_id")) |>
  # to prioritise find_loc locations 
  mutate(link_type = case_when(
    find_loc_type=="location" ~ 1,
    .default = 2
  )) |>
  left_join(bn_lecturers_p33_query |> select(item, region, regionLabel), by=c("p33_id"="item"))  |>
  relocate(p33_id, p33_label, region, regionLabel)


bn_lecturers_loc_linked_region <-
bn_lecturers_loc_linked |>
  filter(!is.na(region)) |>
  group_by(s) |> # not got s_id, not sure if it matters
  top_n(-1, link_type) |>
  ungroup() 


  # to check for more than 1 region. (after filtering NA region)
  # group_by(s_id) |>
  # mutate(nd_region = n_distinct(region)) |>
  # ungroup() |>
  # filter(nd_region>1) |>
```





## Overview

Numbers of freelance/extension are similar. A few freelance lecturerships are undated; these will be ignored in subsequent charts. 

```{r}
bn_lecturers_query |>
  mutate(dated = if_else(is.na(date), "no", "yes")) |>
  distinct(s, bn_id, positionLabel, dated) |>
  count(positionLabel, dated) |>
  ggplot(aes(positionLabel, n, fill=dated)) +
  geom_col() +
  scale_fill_ptol() +
  labs(y="number of positions", x=NULL, title="Extension and freelance")
```







### broad chronology of extension/freelance


a) everyone

```{r}
bn_lecturers_dates |>
  ggplot(aes(year1, colour=position_label, fill=position_label)) +
  geom_density(alpha=0.5) +
  scale_colour_tableau() +
  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(colour="position", fill="position", x="year", title = "Density chart of extension and freelance lecturing")
```

b) excluding Margaret Murray (!)

```{r}
bn_lecturers_dates |>
  filter(bn_id != "Q569") |>
  ggplot(aes(year1, colour=position_label, fill=position_label)) +
  geom_density(alpha=0.5) +
  scale_colour_tableau() +
  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(colour="position", fill="position", x="year", title = "Density chart of extension and freelance lecturing, excluding MM")
```

c) both types of lecturing plus `spoke at`

```{r}
bn_lecturers_dates |>
  bind_rows(bn_spoke_at ) |>
  #filter(bn_id != "Q569") |>
  ggplot(aes(year1, colour=position_label, fill=position_label)) +
  geom_density(alpha=0.4) +
    scale_colour_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
    scale_fill_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
  theme(legend.position = "bottom") +
  labs(colour="position", fill="position", x="year", title = "Extension and freelance lecturing + spoke at")
```




### Timelines of positions per decade

```{r}
bn_lecturers_dates |> 
  #filter(bn_id !="Q569") |>
  #make_decade(year1) |>
  mutate(decade = fct_rev(paste0(decade, "s"))) |>
  ggplot(aes(y=decade, x=start_date, colour=position_label)) +
  geom_point(shape=124, size=4) +
  scale_color_tableau() +
  #scale_alpha_manual(values = c(1, 0.5)) +
  # Remove text and title from x axis
  theme(axis.text.x      = element_blank()) +
  #theme(axis.title.x     = element_blank()) +
  # Remove x tick marks
  theme(axis.ticks.x       = element_blank())  +
  theme(legend.position = "bottom") +
  labs(x="date", y=NULL, colour="position")
```

the one without MM; mainly affects 1920s and 1930s

```{r}
bn_lecturers_dates |> 
  filter(bn_id !="Q569") |>
  make_decade(year1) |>
  mutate(decade = fct_rev(paste0(decade, "s"))) |>
  ggplot(aes(y=decade, x=start_date, colour=position_label)) +
  geom_point(shape=124, size=4) +
  scale_color_tableau() +
  # Remove text and title from x axis
  theme(axis.text.x      = element_blank()) +
  #theme(axis.title.x     = element_blank()) +
  # Remove x tick marks
  theme(axis.ticks.x       = element_blank()) +
  theme(legend.position = "bottom")  +
  labs(caption = "excluding MM", y=NULL, x="date")
```




## Women

MM is the most obvious challenge for saying anything about general trends, but freelance lecturing is also highly concentrated around a few women, especially Helen Mary Tirard.

```{r}
bn_lecturers_dates |> 
  mutate(earliest = min(year1), .by = bn_id) |>
  add_count(bn_id, name="n_bn") |>
  #filter(bn_id !="Q569") |>
  #filter(n>1) |>
  #filter(!is.na(bn_dob_yr)) |>
  #mutate(bn_dob_yr = replace_na(bn_dob_yr, 9999)) |>
  relocate(start_date) |>
  count(bn_id, person_label, position_label, earliest, n_bn) |>
  mutate(person_label = fct_reorder(person_label, n_bn)) |>
  ggplot(aes(y=person_label, x=n, fill=position_label)) +
  geom_col() +
  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(fill="position", y=NULL, x="number of positions")
```

including `spoke at` this time 

MM is still way out ahead, but some women (eg Ada Goodrich-Fraser) are rather differently placed when this is included. 

```{r}
bind_rows(bn_lecturers_dates, bn_spoke_at) |> 
  mutate(earliest = min(year1), .by = bn_id) |>
  add_count(bn_id, name="n_bn") |>
  #filter(bn_id !="Q569") |>
  #filter(n>1) |>
  #filter(!is.na(bn_dob_yr)) |>
  #mutate(bn_dob_yr = replace_na(bn_dob_yr, 9999)) |>
  relocate(start_date) |>
  count(bn_id, person_label, position_label, earliest, n_bn) |>
  mutate(person_label = fct_reorder(person_label, n_bn)) |>
  ggplot(aes(y=person_label, x=n, fill=position_label)) +
  geom_col() +
  scale_fill_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
#  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(fill="position", y=NULL, x="number of positions")
```

timeline chart for the individuals


```{r}

bn_lecturers_dates |> 
  mutate(earliest = min(year1), latest=max(start_date), .by = bn_id) |>
  mutate(start = min(start_date) )  |>
  add_count(bn_id) |>
  relocate(start_date) |>
  mutate(person_label = fct_reorder(person_label, -earliest)) |>
  ggplot(aes(y=person_label, x=start_date, colour=position_label)) +
  geom_segment( aes(x=start, xend=latest, yend=person_label), linewidth=0.2, colour="lightgrey") +
  geom_point(shape=124, size=4) +
  scale_color_tableau() +
   scale_x_datetime(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(legend.position = "bottom", axis.ticks.y=element_blank()) +
  labs(y=NULL, x="date", colour="position")
```

a bit more crowded when `spoke at` is added

```{r}

bind_rows(bn_lecturers_dates, bn_spoke_at) |> 
  mutate(earliest = min(year1), latest=max(start_date), .by = bn_id) |>
  mutate(start = min(start_date) )  |>
  add_count(bn_id) |>
  relocate(start_date) |>
  mutate(person_label = fct_reorder(person_label, -earliest)) |>
  ggplot(aes(y=person_label, x=start_date, colour=position_label)) +
  geom_segment( aes(x=start, xend=latest, yend=person_label), linewidth=0.2, colour="lightgrey") +
  geom_point(shape=124, size=4) +
  scale_color_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
   scale_x_datetime(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(legend.position = "bottom", axis.ticks.y=element_blank()) +
  labs(y=NULL, x="date", colour="position")
```





## Organisations


"Other extension centres" groups together extension centres that appear only once (51 at time of writing). 

```{r}
bn_lecturers_dates  |>
  add_count(organisation, name="n_ext") |>
  mutate(organisation_ext = case_when(
    #n_ext<2 & str_detect(organisation, "[Ee]xten.ion") ~ "Other extension centres",
    n_ext<2 & position_label=="Lecturer (Extension)" ~  "Other extension centres",
    .default = organisation
  )) |>
  count(organisation_ext, position_label, sort = T) |> 
  #filter(position_label=="Lecturer (Extension)" & organisation_ext !="Other extension centres") 
  #summarise(s = sum(n))
  mutate(organisation_ext = fct_reorder(organisation_ext, n)) |>
  ggplot(aes(n, organisation_ext, fill=position_label)) +
  geom_col() +
  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(y=NULL, x="number of positions", fill="position", title="Organisations")
```

As I did previously with events, I though I'd take a look at the distribution of individuals across organisers. 

Although not identifying all the individuals, MM was particularly noticeable in the single-appearance extension centres so that's highlighted. 

```{r}
bn_lecturers_dates |>
  add_count(organisation, name="n_ext") |>
  #filter(n_ext>1) |>
  mutate(organisation = case_when(
    #n_ext<2 & str_detect(organisation, "[Ee]xten.ion") ~ "Other extension centres",
    n_ext<2 & position_label=="Lecturer (Extension)" ~ "Other extension centres",
    .default = organisation
  )) |>
  add_count(organisation, name="n_ext2", sort=T) |>
  group_by(organisation, n_ext2, is_mm, bn_id) |>
  summarise(n_ev=n(),  .groups = "drop_last") |>
  arrange(n_ev, .by_group = T) |>
  mutate(cum_sum_ev = cumsum(n_ev)) |>
  ungroup() |>
  mutate(organisation = fct_reorder(organisation, n_ext2)) |>
  
  ggplot(aes(organisation, n_ev, fill=is_mm )) +
  geom_col(colour="white") +
  coord_flip() +
  scale_fill_pander() +
  theme(legend.position = "bottom") +
  labs(x=NULL, y="number of positions", fill="person", title="Organisations")


```

Bearing in mind that most freelance lecturing doesn't have an organisation anyway, there appears to be very little overlap between organisers of freelance and spoke at.

```{r}
bind_rows(bn_lecturers_dates,
          bn_spoke_at  ) |>
  add_count(organisation, name="n_ext") |>
  filter(organisation !="none recorded" & n_ext>1) |>
  # mutate(organisation_ext = case_when(
  #   #n_ext<2 & str_detect(organisation, "[Ee]xten.ion") ~ "Other extension centres",
  #   n_ext<2 & position_label=="Lecturer (Extension)" ~ "Other extension centres",
  #   .default = organisation
  # )) |>
  # add_count(organisation_ext, name="n2") |>
 # filter(n2>1) |>
  count(organisation, position_label, n_ext, sort = T) |> 
  #filter(position_label=="Lecturer (Extension)" & organisation_ext !="Other extension centres") 
  #summarise(s = sum(n))
  mutate(organisation = fct_reorder(organisation, n_ext)) |>
  ggplot(aes(n, organisation, fill=position_label)) +
  geom_col() +
  scale_fill_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
  theme(legend.position = "bottom") +
  labs(y=NULL, x="number of positions", fill="position", title="Organisations")
```




## Regions

(excluding `spoke at`)

caveats

- some positions didn't have enough information recorded to look for a location
- some potentially mappable posts in the UK failed to be mapped, because they didn't have location information to link to on their pages. 
- it's possible in some cases to look for information on wikidata instead, but that tends to be rather unrewarding (compared to the extra work involved)

Some of the numbers beyond London and the south east are very small. (None in N-E England or Scotland, and only one in Wales.)


locations come from one of two possible sources:

- look for a location P2 for the position on the person page
- if there isn't, look for a location P2 for the organising/employing organisation

The latter may not always be a precisely accurate address for the place where the work actually happened, but only a minority of positions have a direct location, and the organisation location should normally be accurate enough for aggregated analysis.


```{r}
# bn_lecturers_dates |>
#   anti_join(bn_lecturers_loc_id_long, by="s")

# ?? distinct IDs
# bn_lecturers_loc_id_long |>
#   anti_join(bn_lecturers_loc_linked_region, by="find_loc_id")
# Q2004 soc of women musicians no location on page (does have wd)
# Q4130 univ extension guild p2 caxton hall no location on page (except in text) and no wd
# Q4029 women's institute - hq location might not be relevant
# Q3775 westend mystery
# Q2420 chelsea club no location on page (except in text) and no wd
# Q2082 fabian soc no location on page (does have wd)

```



```{r}
bn_lecturers_loc_linked_region |>
  count(regionLabel) |>
  inner_join(ons_uk_regions_map, by=c("regionLabel"="bn_name")) |>
  ggplot(aes(geometry=geometry, fill=n)) +
  geom_sf(colour="white") +
  coord_sf() +
  scale_fill_viridis_b() +
  labs(fill="count", title="Heatmap of regional locations of lecturing positions")

```




```{r}
bn_lecturers_loc_linked_region |>
  filter(region !="Q75") |>
  count(regionLabel) |>
  inner_join(ons_uk_regions_map, by=c("regionLabel"="bn_name")) |>
  ggplot(aes(geometry=geometry, fill=n)) +
  geom_sf(colour="white") +
  coord_sf() +
  scale_fill_viridis_b() +
  labs(fill="count", title="Heatmap of regional locations of lecturing positions excluding London")

```


As tables

```{r}
bn_lecturers_loc_linked_region |>
  count(regionLabel) |>
  kable() |> kable_styling()
```


A breakdown of the London postcode areas. 


```{r}
bn_lecturers_loc_linked_region |>
  filter(region=="Q75") |>
  filter(str_detect(p33_label,"London ")) |>
  count(p33_label)  |>
  rename(area = p33_label) |>
  kable() |> kable_styling()
```


## Table

This doesn't include the `spoke at` data.

```{r}
# put the undated back in but keep one line per start-end
bn_lecturers_reactable <-
bn_lecturers_dates |>
  mutate(sid = str_replace(s, "^(Q\\d+)-", "\\1$")) |>
  select(bn_id, person_label, position_label, organisation, year_point_in_time, year_start_time, year_end_time, year1, sid) |>
  bind_rows(
    bn_lecturers_query |> 
      filter(is.na(date)) |>
      mutate(sid = str_replace(s, "^(Q\\d+)-", "\\1$")) |>
      select(bn_id, personLabel, positionLabel, organisation=organisedLabel, sid) |>
      clean_names("snake") 
  ) |>
  arrange(person_label, year1) |>
  rename(year_pit=year_point_in_time, year_start=year_start_time, year_end=year_end_time) |>
  
  select(-year1)
```


```{r}

reactable(
  bn_lecturers_reactable ,
  filterable = TRUE,
  searchable = TRUE,
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 105,
  #groupBy = "event",
  defaultExpanded = TRUE,
  defaultColDef = colDef(maxWidth = 60),  # , headerClass = "sticky" but i think it has to be fixed height to use this
  columns = list(
    bn_id = colDef(name="id", maxWidth = 70),
    person_label =colDef(maxWidth = 250, name="name",
      html = TRUE,
      cell = function(value, index) {
        sprintf('<a href="https://beyond-notability.wikibase.cloud/entity/%s#%s" target="_blank">%s</a>', bn_lecturers_reactable$bn_id[index], bn_lecturers_reactable$sid[index], value)
      })   ,
   year_pit = colDef(maxWidth = 70, name = "year (PIT)"),
   year_start = colDef(maxWidth = 70, name="year (start)"),
   year_end = colDef(maxWidth = 70, name="year (end)"),
   organisation = colDef(maxWidth = 170),
   position_label=colDef(maxWidth = 130, name="position"),
   sid=colDef(show = FALSE)
    
  )
)
# https://beyond-notability.wikibase.cloud/entity/Q1119#Q1119$ab0351d2-4900-d981-c2ec-7d8a31c74fe7
# # for some grrr reason the first dash is replaced with a $ in the html id.
#   bind(replace(?sid, "^(Q\\d+)-", "$1\\$") as ?pid) 
```



