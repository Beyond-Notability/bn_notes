---
title: "Work activities: Lecturing"
author: "Sharon Howard"
description: "Are there trends in freelance vs extension lecturing?"
date: "2024-04-09"
date-modified: today
categories: 
  - ppa
  - work
execute: 
  warning: false
  message: false
  echo: false 
---


## Wikibase queries

* [Lecturers](https://beyond-notability.wikibase.cloud/wiki/Project:SPARQL/examples#Lecturers)
* [Spoke at](https://tinyurl.com/2ayfry5d)

```{r libraries-etc}
# shared libraries, functions etc ####

source(here::here("_R/shared.R"))

# any extra libraries will usually go here 

#library(ggbeeswarm)
#library(gghighlight)

# standard query strings and queries ####

source(here::here("_R/std_queries.R"))

```

## Notes

I've added `spoke at` data for some comparisons, but only for the women in this lecturer subset, not the whole lot.

TODO 

places and travel questions. (sorry! as with suffrage, this needs some more working out)



```{r}

##query without date property labels

bn_lecturers_sparql <- 
'SELECT distinct ?person ?personLabel ?workLabel  ?positionLabel 
?date ?date_precision ?pq
?organisedLabel ?ofLabel 
?position ?of  ?work ?organised 
?s

WHERE {
    
  ?person bnwdt:P3 bnwd:Q3 . # women
  
  # work activities: held position / held position (free text) /  employed as
  #?person ( bnp:P17|bnp:P48|bnp:P105 ) ?s .  
  
  ?person ?work_p ?s . # for activity type label
    ?work wikibase:claim ?work_p .  

    ?s ?bnps ?position .  
    # freelance and extension lecturing (q701 and q3021)
    { ?s ?bnps bnwd:Q701  . } union { ?s ?bnps bnwd:Q3021 .  }
  
    # employer / organised by / of (incl free text). 
    # dont appear to be any employer for this subset
    #OPTIONAL { ?s bnpq:P18 ?employer .}  
    OPTIONAL { ?s bnpq:P109 ?organised .}
    OPTIONAL { ?s ( bnpq:P78 | bnpq:P66 ) ?of .}
 
   # optional { ?s bnpq:P2 ?location . } # do locations separately.
    
  # dates - get precision here because some are almost certainly yyyy
    optional {
      ?s (bnpqv:P1 | bnpqv:P27 | bnpqv:P28  ) ?pqv.
      ?s ?pq ?pqv . # just gets the uri but doesnt seem to cause dups
         ?pqv wikibase:timeValue ?date .  
         ?pqv wikibase:timePrecision ?date_precision .
      
      # doesnt seem to make much difference to time here, but does change number of results
      #?s ?pq ?date .   
      #    ?date_prop wikibase:qualifier ?pq .
      #    ?date_prop wikibase:propertyType wikibase:Time.  
      
      } # /dates
   
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
  
} # /where

ORDER BY ?person
'

bn_lecturers_query <-
  bn_std_query(bn_lecturers_sparql) |>
  make_bn_item_id(person) |>
  make_bn_ids(c(pq, position, of, work, organised, s)) |>
  mutate(across(c(organisedLabel, ofLabel, of, organised, pq), ~na_if(., ""))) |>
  make_date_year() |>
  # add the date property labels
  mutate(date_propLabel = case_when(
    pq=="P1" ~ "point in time",
    pq=="P27" ~ "start time",
    pq=="P28" ~ "end time"
  )) |>
  rename(date_prop=pq)  |>
  relocate(person, .after = last_col())


bn_lecturers_dates <-
bn_lecturers_query |>
  filter(!is.na(date)) |>
  select(bn_id, personLabel, date, date_propLabel, year, date_precision, positionLabel, organisedLabel, ofLabel, organised, of, position, work, s) |>
  # group by / top n to discard any extras before pivot
  #top_n -1 for the first of multi rows. arrange by date to ensure this is the earliest.
  group_by(s, date_propLabel) |>
  arrange(date, .by_group = T) |>
  top_n(-1, row_number()) |>
  ungroup() |>
  pivot_wider(names_from = date_propLabel, values_from = c(date, date_precision, year)) |>
  # don't forget this will rename *all* the camelCase columsn...
  clean_names("snake") |>
  #not sure why r prefixes all the pivoted cols 
  rename_with(~str_remove(., "^date_"), starts_with("date_")) |>
  mutate(start_date = if_else(!is.na(point_in_time), point_in_time, start_time)) |>
  mutate(year1 = if_else(!is.na(year_point_in_time), year_point_in_time, year_start_time)) |>
  make_decade(year1) |>
  relocate(end_time, .after = start_time) |>
  relocate(year_end_time, .after = year_start_time) |>
  mutate(end_date = case_when(
    !is.na(end_time) ~ end_time,
    !is.na(point_in_time) ~ point_in_time,
    !is.na(start_time) ~ start_time
  )) |>
  mutate(precision = case_when(
    precision_end_time>precision_start_time ~ precision_end_time,
    !is.na(precision_start_time) ~ precision_start_time,
    !is.na(precision_point_in_time) ~ precision_point_in_time
  )) |>
  # consolidate of/organised by; "none recorded" for NA if extension.
  mutate(organisation = case_when(
    !is.na(of_label) ~ of_label,
    !is.na(organised_label) ~ organised_label,
    #position=="Q701" ~ "none (freelance)",
    .default = "none recorded"
  )) |>
  relocate(organisation, .after = of) |>
  mutate(is_mm = if_else(bn_id=="Q569", "MM", "other")) |>
  arrange(person_label,  start_date) |> 
  left_join(bn_women_dob_dod, by="bn_id") |>
  relocate(s, .after = last_col()) 
```





```{r}
# relationship to spoke at ?

bn_spoke_at_sparql <- 
  '
SELECT distinct ?person ?personLabel ?ppaLabel ?ofLabel ?date ?date_precision   ?ppa ?pqq  ?of
?s

WHERE {  
  ?person bnwdt:P3 bnwd:Q3 .
  ?person bnp:P23  ?s .
    ?s bnps:P23  ?ppa .  
          
  # of qualifier
   optional { 
     ?s ( bnpq:P78|bnpq:P66	 ) ?of . 
     #?s ?of_p ?of .  # weird, this adds a single extra row for a P2. why only the one? not essential anyway.
     #?of_prop wikibase:qualifier ?of_p . 
    }
    
  # dates with precision. theres only one end time so ignore that for now.  | bnpqv:P28
    #optional {
      ?s (bnpqv:P1 | bnpqv:P27  ) ?pqv.
      ?s ?pqq ?pqv . # just gets the uri 
         ?pqv wikibase:timeValue ?date .  
         ?pqv wikibase:timePrecision ?date_precision .
    #  }
      
   
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
  
} # /where

ORDER BY ?person ?s'


bn_spoke_at_query <-
  bn_std_query(bn_spoke_at_sparql) |>
  make_bn_item_id(person) |>
  make_bn_ids(c(ppa, pqq, of, s)) |>
  mutate(across(c(pqq, of, ofLabel, pqq), ~na_if(., ""))) |>
  make_date_year() |>
  # add the date property labels
  mutate(date_propLabel = case_when(
    pqq=="P1" ~ "point in time",
    pqq=="P27" ~ "start time",
    pqq=="P28" ~ "end time"
  )) |>
  rename(date_prop=pqq, person_label=personLabel)  |>
  select(-person)



## only 4 without date, so drop the optional
# only 3 not p.i.t. only 1 end time. it's only 1 month. drop as well
# how did that P2 get back in there!! hmm.
# a few multi org and a few  more than one date. top n for now.
# bn_spoke_at_query |>
#   add_count(s) |>
#   arrange(bn_id, s) |> relocate(s) |>
#   filter(n>1) 

bn_spoke_at <-
  bn_spoke_at_query |>
  group_by(s) |>
  top_n(1, row_number()) |>
  ungroup() |>
  rename(start_date=date, year1=year, precision=date_precision) |>
  make_decade(year1) |>
  mutate(position_label="spoke at", position="P23") |>
  semi_join(bn_lecturers_dates, by="bn_id") |>
  mutate(organisation = case_when(
    !is.na(ofLabel) ~ ofLabel,
    ppaLabel %in% c("event", "meeting") & is.na(ofLabel) ~ "none recorded",
    !is.na(ppaLabel) ~ ppaLabel, 
    is.na(ppaLabel) & is.na(ofLabel) ~ "none recorded"
  )) |>
  mutate(is_mm = if_else(bn_id=="Q569", "MM", "other"))
```



```{r academics}
# bn_academics_sparql <-
# 'SELECT distinct ?person ?workLabel ?positionLabel ?date ?date_precision ?pqq 
# ?employerLabel ?employer 
# ?position ?work ?personLabel
# ?s
# 
# WHERE {
#     
#   ?person bnwdt:P3 bnwd:Q3 . # women
#   
#   # work activities: held position / held position (free text) /  employed as
#   ?person ( bnp:P17|bnp:P48|bnp:P105 ) ?s .  
#   
#   ?person ?work_p ?s . # for activity type label
#     ?work wikibase:claim ?work_p .  
# 
#     ?s ?bnps ?position .  
#     # Lecturer Q604 Academic (Q152) Assistant Lecturer (Q1292) 
#     { ?s ?bnps bnwd:Q604  . } union { ?s ?bnps bnwd:Q152 .  } union { ?s ?bnps bnwd:Q1292 }
#   
#     # employer / organised by / of (incl free text). 
#     optional { ?s bnpq:P18 ?employer .  }
#    # OPTIONAL { ?s bnpq:P109 ?organised .}
#    # OPTIONAL { ?s ( bnpq:P78 | bnpq:P66 ) ?of .}
#  
#    # optional { ?s bnpq:P2 ?location . } # do locations separately.
#     
#   # dates with precision
#     optional {
#       ?s (bnpqv:P1 | bnpqv:P27 | bnpqv:P28  ) ?pqv.
#       ?s ?pqq ?pqv . # just gets the uri 
#          ?pqv wikibase:timeValue ?date .  
#          ?pqv wikibase:timePrecision ?date_precision .
#       }
#       
#   SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
#   
# } # /where
# 
# ORDER BY ?person ?s'
# 
# bn_academics_query <-
#   bn_std_query(bn_academics_sparql) |>
#   make_bn_item_id(person) |>
#   make_bn_ids(c(work, position, employer, pqq, s)) |>
#   mutate(across(c(employer, employerLabel, date, pqq), ~na_if(., ""))) |>
#   make_date_year() |>
#   # add the date property labels
#   mutate(date_propLabel = case_when(
#     pqq=="P1" ~ "point in time",
#     pqq=="P27" ~ "start time",
#     pqq=="P28" ~ "end time"
#   )) |>
#   rename(date_prop=pqq)  |>
#   select(-person)
# 
# bn_academics_lecturers_dates <-
# bn_academics_query |> 
#   semi_join(bn_lecturers_dates, by="bn_id") |> 
#   filter(!is.na(date)) |> 
#   select(bn_id, personLabel, date, date_propLabel, year, date_precision, positionLabel, workLabel, employerLabel, position, s) |>
#   #add_count(s, date_prop) |> 
#   # group by / top n to discard any extras before pivot
#   # top_n -1 for the first of multi rows. arrange by date to ensure this is the earliest. needed here for qualifiers
#   group_by(s, date_propLabel) |>
#   arrange(date, positionLabel, .by_group = T) |>
#   top_n(-1, row_number()) |>
#   ungroup() |>
#   pivot_wider(names_from = date_propLabel, values_from = c(date, date_precision, year)) |>
#   # don't forget this will rename *all* the camelCase columsn...
#   clean_names("snake") |>
#   #not sure why r prefixes all the pivoted cols 
#   rename_with(~str_remove(., "^date_"), starts_with("date_")) |>
#   mutate(start_date = if_else(!is.na(point_in_time), point_in_time, start_time)) |>
#   mutate(year1 = if_else(!is.na(year_point_in_time), year_point_in_time, year_start_time)) |>
#   relocate(end_time, .after = start_time) |>
#   relocate(year_end_time, .after = year_start_time)  |>
#   mutate(end_date = case_when(
#     !is.na(end_time) ~ end_time,
#     !is.na(point_in_time) ~ point_in_time,
#     !is.na(start_time) ~ start_time
#   )) |>
#   mutate(precision = case_when(
#     precision_end_time>precision_start_time ~ precision_end_time,
#     !is.na(precision_start_time) ~ precision_start_time,
#     !is.na(precision_point_in_time) ~ precision_point_in_time
#   )) 
```


```{r children}

# bn_had_children_sparql <-
# 'SELECT distinct ?person ?personLabel ?childLabel ?date_value ?date_prec ?had_child_edtf ?note  ?child ?s
# 
# where {
# 
#   ?person bnwdt:P3 bnwd:Q3 . # select women
#   FILTER NOT EXISTS {?person bnwdt:P4 bnwd:Q12 .} #filter out project team
#    
# {   
#   # had child (unnamed)
#   ?person bnp:P131 ?s .
#       ?s bnps:P131 ?had_child_edtf . # keep the edtf date for reference, though i think you can just use time value/prec with these.
# 
#   # get dates detail 
#       ?s ?psv ?wdv .
#         ?wdv wikibase:timeValue ?date_value .
#         ?wdv wikibase:timePrecision ?date_prec .
#   
#   # filter edtf date.
#   FILTER ( datatype(?had_child_edtf) = xsd:edtf ) . #shows only the raw EDTF string from the query results
#     
#    # not much added in quals for had child. only maybe note P47. some have sourcing circumstances.
#    optional { ?s bnpq:P47 ?note .} 
#    
#   } 
#   union 
#   {
#   # named children (are any in both sections??? from dates looks possible a couple might be [wherry / hodgson])
#    ?person bnp:P45 ?s.
#         ?s bnps:P45 ?child .
#         optional { ?child bnp:P26 ?ss .
#                     ?ss bnps:P26 ?dob . 
#                      ?ss ?psv ?wdv .
#                         ?wdv wikibase:timeValue ?date_value .
#                         ?wdv wikibase:timePrecision ?date_prec .
#                }
#   }
#   
#     SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
# }
# order by ?person ?date_value
# '
# 
# bn_had_children_query <-
#   bn_std_query(bn_had_children_sparql) |>
#   make_bn_item_id(person) |>
#   make_bn_ids(c(child, s)) |>
#   mutate(across(c(note, had_child_edtf, childLabel, child), ~na_if(., ""))) |>
#   relocate(person, .after = last_col())
# 
# 
# 
# bn_had_children_lecturers <-
# bn_had_children_query |>
#   semi_join(bn_lecturers_dates, by="bn_id"  ) |>
#     mutate(date_value = if_else(str_detect(date_value, "^_:t"), NA, date_value))  |>
#     mutate(date_value = parse_date_time(date_value, "ymdHMS"))  |>
#     mutate(year = year(date_value)) |>
#   relocate(year, .after = date_value) |>
#   filter(!is.na(date_value)) |>
#   # this will sort named children above had_child rows. then top_n
#   arrange(bn_id, year, child) |>
#   group_by(bn_id, year) |>
#   top_n(-1, row_number()) |>
#   ungroup() 

```


## Overview

Numbers of freelance/extension are nearly the same. A few freelance lecturerships are undated; these will be ignored in subsequent charts. 

```{r}
bn_lecturers_query |>
  mutate(dated = if_else(is.na(date), "no", "yes")) |>
  distinct(s, bn_id, positionLabel, dated) |>
  count(positionLabel, dated) |>
  ggplot(aes(positionLabel, n, fill=dated)) +
  geom_col() +
  scale_fill_ptol() +
  labs(y="number of positions", x=NULL, title="Extension and freelance")
```







### broad chronology of extension/freelance


a) everyone

```{r}
bn_lecturers_dates |>
  ggplot(aes(year1, colour=position_label, fill=position_label)) +
  geom_density(alpha=0.5) +
  scale_colour_tableau() +
  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(colour="position", fill="position", x="year", title = "Density chart of extension and freelance lecturing")
```

b) excluding Margaret Murray (!)

```{r}
bn_lecturers_dates |>
  filter(bn_id != "Q569") |>
  ggplot(aes(year1, colour=position_label, fill=position_label)) +
  geom_density(alpha=0.5) +
  scale_colour_tableau() +
  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(colour="position", fill="position", x="year", title = "Density chart of extension and freelance lecturing, excluding MM")
```

c) both types of lecturing plus `spoke at`

```{r}
bn_lecturers_dates |>
  bind_rows(bn_spoke_at ) |>
  #filter(bn_id != "Q569") |>
  ggplot(aes(year1, colour=position_label, fill=position_label)) +
  geom_density(alpha=0.4) +
    scale_colour_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
    scale_fill_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
  theme(legend.position = "bottom") +
  labs(colour="position", fill="position", x="year", title = "Extension and freelance lecturing + spoke at")
```


```{r}
# bn_lecturers_dates |>
#   count(year1, is_mm) |>
#   ggplot(aes(year1, n, fill=is_mm)) +
#   geom_col() +
#   scale_fill_pander()
```

### Timelines of positions per decade

```{r}
bn_lecturers_dates |> 
  #filter(bn_id !="Q569") |>
  #make_decade(year1) |>
  mutate(decade = fct_rev(paste0(decade, "s"))) |>
  ggplot(aes(y=decade, x=start_date, colour=position_label)) +
  geom_point(shape=124, size=4) +
  scale_color_tableau() +
  #scale_alpha_manual(values = c(1, 0.5)) +
  # Remove text and title from x axis
  theme(axis.text.x      = element_blank()) +
  #theme(axis.title.x     = element_blank()) +
  # Remove x tick marks
  theme(axis.ticks.x       = element_blank())  +
  theme(legend.position = "bottom") +
  labs(x="date", y=NULL, colour="position")
```

the one without MM; mainly affects 1920s and 1930s

```{r}
bn_lecturers_dates |> 
  filter(bn_id !="Q569") |>
  make_decade(year1) |>
  mutate(decade = fct_rev(paste0(decade, "s"))) |>
  ggplot(aes(y=decade, x=start_date, colour=position_label)) +
  geom_point(shape=124, size=4) +
  scale_color_tableau() +
  # Remove text and title from x axis
  theme(axis.text.x      = element_blank()) +
  #theme(axis.title.x     = element_blank()) +
  # Remove x tick marks
  theme(axis.ticks.x       = element_blank()) +
  theme(legend.position = "bottom")  +
  labs(caption = "excluding MM", y=NULL, x="date")
```



```{r}
# hmm.
# bn_lecturers_dates |> 
#   bind_rows(bn_spoke_at) |>
#   #filter(bn_id !="Q569") |>
#   #make_decade(year1) |>
#   mutate(decade = fct_rev(paste0(decade, "s"))) |>
#   ggplot(aes(y=decade, x=start_date, colour=position_label)) +
#   geom_point(shape=124, size=4) +
#   scale_color_tableau() +
#   #scale_alpha_manual(values = c(1, 0.5)) +
#   # Remove text and title from x axis
#   theme(axis.text.x      = element_blank()) +
#   #theme(axis.title.x     = element_blank()) +
#   # Remove x tick marks
#   theme(axis.ticks.x       = element_blank())  +
#   theme(legend.position = "bottom") +
#   labs(x="date", y=NULL, colour="position")
```

## Women

MM is the most obvious challenge for saying anything about general trends, but freelance lecturing is also highly concentrated around two women, Jane Ellen Harrison and Helen Mary Tirard (perhaps especially the latter).

```{r}
bn_lecturers_dates |> 
  mutate(earliest = min(year1), .by = bn_id) |>
  add_count(bn_id, name="n_bn") |>
  #filter(bn_id !="Q569") |>
  #filter(n>1) |>
  #filter(!is.na(bn_dob_yr)) |>
  #mutate(bn_dob_yr = replace_na(bn_dob_yr, 9999)) |>
  relocate(start_date) |>
  count(bn_id, person_label, position_label, earliest, n_bn) |>
  mutate(person_label = fct_reorder(person_label, n_bn)) |>
  ggplot(aes(y=person_label, x=n, fill=position_label)) +
  geom_col() +
  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(fill="position", y=NULL, x="number of positions")
```

including `spoke at` this time 

MM is still way out ahead, but some women (eg Ada Goodrich-Fraser) are rather differently placed when this is included. 

```{r}
bind_rows(bn_lecturers_dates, bn_spoke_at) |> 
  mutate(earliest = min(year1), .by = bn_id) |>
  add_count(bn_id, name="n_bn") |>
  #filter(bn_id !="Q569") |>
  #filter(n>1) |>
  #filter(!is.na(bn_dob_yr)) |>
  #mutate(bn_dob_yr = replace_na(bn_dob_yr, 9999)) |>
  relocate(start_date) |>
  count(bn_id, person_label, position_label, earliest, n_bn) |>
  mutate(person_label = fct_reorder(person_label, n_bn)) |>
  ggplot(aes(y=person_label, x=n, fill=position_label)) +
  geom_col() +
  scale_fill_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
#  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(fill="position", y=NULL, x="number of positions")
```

timeline chart for the individuals


```{r}

bn_lecturers_dates |> 
  mutate(earliest = min(year1), latest=max(start_date), .by = bn_id) |>
  mutate(start = min(start_date) )  |>
  add_count(bn_id) |>
  relocate(start_date) |>
  mutate(person_label = fct_reorder(person_label, -earliest)) |>
  ggplot(aes(y=person_label, x=start_date, colour=position_label)) +
  geom_segment( aes(x=start, xend=latest, yend=person_label), linewidth=0.2, colour="lightgrey") +
  geom_point(shape=124, size=4) +
  scale_color_tableau() +
   scale_x_datetime(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(legend.position = "bottom", axis.ticks.y=element_blank()) +
  labs(y=NULL, x="date", colour="position")
```

a bit more crowded when `spoke at` is added

```{r}

bind_rows(bn_lecturers_dates, bn_spoke_at) |> 
  mutate(earliest = min(year1), latest=max(start_date), .by = bn_id) |>
  mutate(start = min(start_date) )  |>
  add_count(bn_id) |>
  relocate(start_date) |>
  mutate(person_label = fct_reorder(person_label, -earliest)) |>
  ggplot(aes(y=person_label, x=start_date, colour=position_label)) +
  geom_segment( aes(x=start, xend=latest, yend=person_label), linewidth=0.2, colour="lightgrey") +
  geom_point(shape=124, size=4) +
  scale_color_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
   scale_x_datetime(expand = expansion(mult = c(0, .01))) + # remove/reduce gap.
  theme(legend.position = "bottom", axis.ticks.y=element_blank()) +
  labs(y=NULL, x="date", colour="position")
```


```{r}

# # steady job.  ?
# # separate geoms may be better, but how do you do shape labels if you don't do something like colour= to make a legend
# bn_lecturers_dates |> 
#   mutate(earliest = min(year1), .by = bn_id) |>
#   add_count(bn_id) |>
#   #filter(bn_id !="Q569") |>
#   filter(n>2) |>
#   #filter(!is.na(bn_dob_yr)) |>
#   #mutate(bn_dob_yr = replace_na(bn_dob_yr, 9999)) |>
#   relocate(start_date) |>
#   mutate(person_label = fct_reorder(person_label, -earliest)) |>
#   ggplot(aes(y=person_label, x=start_date)) +
#   #geom_dumbbell(data=bn_academics_lecturers_dates, aes(y=person_label, x=start_date, xend=end_date), size=2, color="grey", alpha=0.5) +
#   geom_point(shape=124, size=4, alpha=.5) +
#   geom_point(data=bn_had_children_lecturers |> rename(person_label=personLabel), aes(y=person_label, x=date_value), shape=1, size=2) +
#   # hmm
#   guides(custom = guide_custom( title = "My circle",  grob = grid::circleGrob(r = unit(1, "mm")) )) +
#   #scale_color_tableau() +
#   #theme(legend.position = "bottom") +
#   labs(y=NULL, x="date", colour="position")
```


## Organisations

"Other extension centres" groups together extension centres that appear only once (51 at time of writing). 

```{r}
bn_lecturers_dates |>
  add_count(organisation, name="n_ext") |>
  mutate(organisation_ext = case_when(
    #n_ext<2 & str_detect(organisation, "[Ee]xten.ion") ~ "Other extension centres",
    n_ext<2 & position_label=="Lecturer (Extension)" ~ "Other extension centres",
    .default = organisation
  )) |>
  count(organisation_ext, position_label, sort = T) |> 
  #filter(position_label=="Lecturer (Extension)" & organisation_ext !="Other extension centres") 
  #summarise(s = sum(n))
  mutate(organisation_ext = fct_reorder(organisation_ext, n)) |>
  ggplot(aes(n, organisation_ext, fill=position_label)) +
  geom_col() +
  scale_fill_tableau() +
  theme(legend.position = "bottom") +
  labs(y=NULL, x="number of positions", fill="position", title="Organisations")
```

As I did previously with events, I though I'd take a look at the distribution of individuals across organisers. 

Although not identifying all the individuals, MM was particularly noticeable in the single-appearance extension centres so that's highlighted. 

(I'll try out an Observable version of this so all the individuals can be identified in the tooltips.)

```{r}
bn_lecturers_dates |>
  add_count(organisation, name="n_ext") |>
  #filter(n_ext>1) |>
  mutate(organisation = case_when(
    #n_ext<2 & str_detect(organisation, "[Ee]xten.ion") ~ "Other extension centres",
    n_ext<2 & position_label=="Lecturer (Extension)" ~ "Other extension centres",
    .default = organisation
  )) |>
  add_count(organisation, name="n_ext2", sort=T) |>
  group_by(organisation, n_ext2, is_mm, bn_id) |>
  summarise(n_ev=n(),  .groups = "drop_last") |>
  arrange(n_ev, .by_group = T) |>
  mutate(cum_sum_ev = cumsum(n_ev)) |>
  ungroup() |>
  mutate(organisation = fct_reorder(organisation, n_ext2)) |>
  
  ggplot(aes(organisation, n_ev, fill=is_mm )) +
  geom_col(colour="white") +
  coord_flip() +
  scale_fill_pander() +
  theme(legend.position = "bottom") +
  labs(x=NULL, y="number of positions", fill="person", title="Organisations")


```

Bearing in mind that most freelance lecturing doesn't have an organisation anyway, there appears to be very little overlap between organisers of freelance and spoke at.

```{r}
bind_rows(bn_lecturers_dates,
          bn_spoke_at  ) |>
  add_count(organisation, name="n_ext") |>
  filter(organisation !="none recorded" & n_ext>1) |>
  # mutate(organisation_ext = case_when(
  #   #n_ext<2 & str_detect(organisation, "[Ee]xten.ion") ~ "Other extension centres",
  #   n_ext<2 & position_label=="Lecturer (Extension)" ~ "Other extension centres",
  #   .default = organisation
  # )) |>
  # add_count(organisation_ext, name="n2") |>
 # filter(n2>1) |>
  count(organisation, position_label, n_ext, sort = T) |> 
  #filter(position_label=="Lecturer (Extension)" & organisation_ext !="Other extension centres") 
  #summarise(s = sum(n))
  mutate(organisation = fct_reorder(organisation, n_ext)) |>
  ggplot(aes(n, organisation, fill=position_label)) +
  geom_col() +
  scale_fill_manual(values = c("#1f77b4", "#ff7f0e",  "#8c564b")) +
  theme(legend.position = "bottom") +
  labs(y=NULL, x="number of positions", fill="position", title="Organisations")
```


```{r}
# bn_lecturers_dates |>
#   add_count(organisation, name="n_ext") |>
#   #filter(n_ext>1) |>
#   mutate(organisation = case_when(
#     #n_ext<2 & str_detect(organisation, "[Ee]xten.ion") ~ "Other extension centres",
#     n_ext<2 & position_label=="Lecturer (Extension)" ~ "Other extension centres",
#     .default = organisation
#   )) |>
#   add_count(organisation, name="n_ext2", sort=T) |>
#   group_by(organisation, n_ext2, is_mm, bn_id) |>
#   summarise(n_ev=n(), .groups = "drop_last") |>
#   arrange(n_ev, .by_group = T) |>
#   mutate(cum_sum_ev = cumsum(n_ev)) |>
#   ungroup() 
```


## Table

This doesn't include the `spoke at` data.

```{r}
# put the undated back in but keep one line per start-end
bn_lecturers_reactable <-
bn_lecturers_dates |>
  mutate(sid = str_replace(s, "^(Q\\d+)-", "\\1$")) |>
  select(bn_id, person_label, position_label, organisation, year_point_in_time, year_start_time, year_end_time, year1, sid) |>
  bind_rows(
    bn_lecturers_query |> 
      filter(is.na(date)) |>
      mutate(sid = str_replace(s, "^(Q\\d+)-", "\\1$")) |>
      select(bn_id, personLabel, positionLabel, organisation=organisedLabel, sid) |>
      clean_names("snake") 
  ) |>
  arrange(person_label, year1) |>
  rename(year_pit=year_point_in_time, year_start=year_start_time, year_end=year_end_time) |>
  
  select(-year1)
```


```{r}

reactable(
  bn_lecturers_reactable ,
  filterable = TRUE,
  searchable = TRUE,
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 105,
  #groupBy = "event",
  defaultExpanded = TRUE,
  defaultColDef = colDef(maxWidth = 60),  # , headerClass = "sticky" but i think it has to be fixed height to use this
  columns = list(
    bn_id = colDef(name="id", maxWidth = 70),
    person_label =colDef(maxWidth = 250, name="name",
      html = TRUE,
      cell = function(value, index) {
        sprintf('<a href="https://beyond-notability.wikibase.cloud/entity/%s#%s" target="_blank">%s</a>', bn_lecturers_reactable$bn_id[index], bn_lecturers_reactable$sid[index], value)
      })   ,
   year_pit = colDef(maxWidth = 70, name = "year (PIT)"),
   year_start = colDef(maxWidth = 70, name="year (start)"),
   year_end = colDef(maxWidth = 70, name="year (end)"),
   organisation = colDef(maxWidth = 170),
   position_label=colDef(maxWidth = 130, name="position"),
   sid=colDef(show = FALSE)
    
  )
)
# https://beyond-notability.wikibase.cloud/entity/Q1119#Q1119$ab0351d2-4900-d981-c2ec-7d8a31c74fe7
# # for some grrr reason the first dash is replaced with a $ in the html id.
#   bind(replace(?sid, "^(Q\\d+)-", "$1\\$") as ?pid) 
```



