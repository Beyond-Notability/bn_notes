---
title: "Excavations and Residences"
author: "Sharon Howard"
description: "Some experimental maps"
date: "2024-12-17"
date-modified: today
categories: 
  - place
  - excavations
execute: 
  warning: false
  message: false
  echo: false 
toc: false
---

## Notes

NB that dates are completely ignored: it's just mapping the location of an excavation with all locatable resided_at (in the UK) for participants, so could be many years apart. Excavations that don't have any locatable participants are omitted.

Hover over the layers symbol (top right of maps) to see the excavations to filter in/out. The smaller groups start with all excavations and participants for the region shown for an overview; but could be tweaked to show the same way as the larger groups. I cannot find an option to select/deselect all for the package I'm using! 

I'm not sure if I can get clustering options to work, so at present you have the issue of only seeing one circle if there are several at the same location. Filters will help to some extent. (The circles will be darker if stacked, and if there's an excavation and a person at the same spot there is a slight difference in colour, so you can get an idea of where it's happening.)


```{r finishing-up}
# new post. code is orrible in places.
```


```{r libraries-etc}
# shared libraries, functions etc ####

source(here::here("_R/shared.R"))

# any extra libraries will usually go here 

library(leaflet)

#library(crosstalk)

# standard query strings and queries ####

source(here::here("_R/std_queries.R"))

# for all the geo. will be in WQS format
#source(here::here("_R/locatable.R"))
```


```{r locations-data}
## 1. fetch all BN items with instance of locality/archaeological site/historic house
## 2. fetch all available coords for BN items with wikidata ID (whether localities or not)
## 3. fetch (main) bn_geo coords (*excl street addresses in resided at*)
## 4. put them together

bn_io_locality_sparql <-
  'SELECT distinct ?localityLabel ?locality ?ioLabel ?io ?wd_id ?bn_geo ?adminLabel ?admin ?bn_io_long ?bn_io_lat
WHERE {  
  
  ?locality bnwdt:P12 ?io . # this will get all the io; prob need a filter
  
  # is a filter better than union here? i think it is. not much time difference but it gets rid of a few extras you dont want (will still have some multis)
  
  filter( ?io in (bnwd:Q2147, bnwd:Q86, bnwd:Q2961)   ) .

  optional {  ?locality bnwdt:P117 ?wd_id .   } # wikidata id
  optional { ?locality bnwdt:P153 ?bn_geo .
  
     BIND(geof:longitude(?bn_geo) AS ?bn_io_long) .
     BIND(geof:latitude(?bn_geo)  AS ?bn_io_lat) .
  } # nb this is not all bn_geo
  optional { ?locality bnwdt:P33 ?admin . } # will be multis
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
}
ORDER BY ?localityLabel'


bn_io_locality_query <-
  bn_std_query(bn_io_locality_sparql) |>
  make_bn_ids(c(locality, io, admin)) |>
  mutate(across(c(wd_id, bn_geo, admin, adminLabel), ~na_if(., "")))


# no admin territory or wd_geo
# top_n is unusual in this set. needed to fix lexden. more once you add admin.
bn_io_locality <-
  bn_io_locality_query |>
  distinct(localityLabel, locality, ioLabel, io, wd_id, bn_geo) |>
  group_by(locality) |>
  arrange(ioLabel, .by_group = TRUE) |> # should result in locality.
  top_n(1, row_number()) |>
  ungroup()  |>
  arrange(localityLabel) |>
  # drop a few locality that are actually i/o Qs
  filter(!locality %in% c("Q86", "Q619", "Q2961")) 




## fetch all wd geo coords P625 that are available for BN items 
## not trying to fetch any other kind of wikidata geo coords of which there are a few.
# (about 1300. nb some multis.)

wd_geo_sparql <-
  'SELECT distinct ?item ?itemLabel ?wd ?wd_geo ?wd_long ?wd_lat 
WHERE {
  ?item bnwdt:P117 ?wd .
      bind(iri(concat("http://www.wikidata.org/entity/", str(?wd))) as ?wikidata) .
      SERVICE <https://query.wikidata.org/sparql> {
           ?wikidata wdt:P625 ?wd_geo .
           
              BIND(geof:longitude(?wd_geo) AS ?wd_long) .
              BIND(geof:latitude(?wd_geo)  AS ?wd_lat) .
       } # /wikidata service
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". }
}
ORDER BY ?item'

# this takes several seconds, but probably worth it to have all the geos in one place
# if it doesn't work well, convert to a sub routine. [something like: gather every potentially locatable Q in data and use spql>sparql]
wd_geo_query <-
  bn_std_query(wd_geo_sparql) |>
  make_bn_ids(item)

# deduping. 
# there are occasionally multi geos for one wikidata item; very occasionally multi wikidata IDs for one BN item (London Museum/MoLondon).
# reduce to one row per item; occasionally might not get the optimal coords; to be monitored
wd_geo <-
  wd_geo_query |>
  group_by(item) |>
  arrange(itemLabel, .by_group = TRUE) |> # should work for desired london museum ID. but might not always give what you want...
  top_n(1, row_number()) |> 
  ungroup()




## get BN geos for main only. get them for street addresses (quals) as needed.
## nb that atm SAL and FS have both...

bn_geo_sparql <-
  'SELECT distinct ?item ?itemLabel  ?bn_geo ?wd ?bn_long ?bn_lat
  WHERE {  
  ?item bnwdt:P153 ?bn_geo . 
     BIND(geof:longitude(?bn_geo) AS ?bn_long) .
     BIND(geof:latitude(?bn_geo)  AS ?bn_lat) .
     
  optional { ?item bnwdt:P117 ?wd .}
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
  }
  ORDER BY ?itemLabel'

bn_geo_query <-
  bn_std_query(bn_geo_sparql) |>
  make_bn_ids(item) |>
  mutate(wd = na_if(wd, ""))


## add i/o data to geo data
# remember not all geo are localities... 

bn_geo_io_locality <-
  bn_geo_query |>
  left_join(bn_io_locality |> select(locality, io, ioLabel), by=c("item"="locality"))

wd_geo_bn_locality <-
  wd_geo |>
  left_join(
    bn_io_locality |> select(-localityLabel, -bn_geo), by=c("item"="locality", "wd"="wd_id") 
  ) 


# other way round: add wd_geo to io localities . seems unlikely to be useful?
# bn_locality_wd_geo <-
# bn_io_locality |>
#   left_join(wd_geo |> select(-itemLabel), by=c("locality"="item", "wd_id"="wd")) 


# combine wd_geo and bn_geo (incl localities)
geo_bn_wd_locality <-
  bn_geo_io_locality |>
  bind_rows(wd_geo_bn_locality)




locality_long_lat <-
geo_bn_wd_locality |>
  mutate(geo = case_when(
    !is.na(bn_geo) ~ bn_geo,
    .default = wd_geo
  )) |>
  mutate(long = case_when(
    !is.na(bn_long) ~ bn_long,
    .default = wd_long
  )) |>
  mutate(lat = case_when(
    !is.na(bn_lat) ~ bn_lat,
    .default = wd_lat
  )) |>
  distinct(locality=item, geo, long, lat)


## NUTS regions for localities

bn_regions_localities_sparql <-
  'select distinct ?item ?itemLabel  ?region  ?regionLabel
where {
    ?item (bnwdt:P33+ | bnwdt:P2+ ) ?region . # parent or ancester P2/P33 
        ?region bnwdt:P12+ bnwd:Q4207 . # in NUTS region
    ?item bnwdt:P12 ?io .
        filter (?io != bnwd:Q3801 ) . #  q3801 unesco site; only 2 and both also have arch.site
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
}
order by ?itemLabel'


bn_regions_localities_query <-
  bn_std_query(bn_regions_localities_sparql) |>
  make_bn_ids(c(item, region))

```



```{r excavations-data}
## temporary dates from descriptions
## for convenience make eg "1930s" first half of decade "1930-1935" (really only using start dates and broad periods so it's not a big deal)
bn_excavations_circa_dates <-
  tribble(
    ~id , ~circa_dates, ~circa_year1, ~circa_year2,
    "Q3200" , "1937-39" , 1937, 1939,
    "Q3893" , "1932", 1932, 1932,
    "Q1631" , "early 20th century", 1900, 1905,
    "Q2589" , "1930s", 1930, 1935,
    "Q3729" , "1950", 1950, 1950,
    "Q3125" , "1948-51", 1948, 1951,
    "Q3727" , "1920s/30s", 1920, 1935,
    "Q3334" , "1930s", 1930, 1935,
    "Q3343" , "1920s", 1920, 1925,
    "Q2026" , "1930s" , 1930, 1935,
    "Q3175" , "1929-34", 1929, 1934,
    "Q2516" , "1920s", 1920, 1925,
    "Q3726" , "1920s", 1920, 1925
    #"Q4386", "1911-12", 1911, 1912
  ) 

# separate queries for persons and excavations initially
# three lots of info
# a) excavation>excavation 
# b) excavation>participants  - "participants" = directors and members only
# c) person>excavation participation


## excavation ####

bn_excavations_main_sparql <-
  'SELECT ?excavation ?excavationLabel ?locationLabel ?location ?propLabel ?valueLabel ?value  ?prop  ?s 

WHERE {  
   # instance of excavation  (128)
   ?excavation bnwdt:P12 bnwd:Q38 .
  
    ?excavation ?p ?s .
  
      ?prop wikibase:claim ?p .
      ?prop wikibase:statementProperty ?ps .
  
   ?s ?ps ?value .  # need optional if you want to keep a <uv> member. which you dont here.
  
    # make this non-optional and restrict to uk excavations
    ?excavation bnwdt:P2 ?location .
      ?location bnwdt:P2*/bnwdt:P33* bnwd:Q1741 .  # in UK. 
  
  SERVICE wikibase:label { bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb". } 
}'

bn_excavations_main_query <-
  bn_std_query(bn_excavations_main_sparql) |>
  make_bn_ids(c(excavation, prop, value, location, s)) |>
  mutate(across(c(valueLabel, value), ~na_if(., ""))) |>
  arrange(excavationLabel, propLabel) |>
  # filter out 1960 excavation
  filter(excavation !="Q3372")  |>
  inner_join(locality_long_lat, by=c("location"= "locality"))



##only half of excavations P2 join regions directly so you need admin territory P33 stuff as well. but there's a multi so don't want to add until you've done all the other processing?

excavations_admin_sparql <-
'SELECT distinct ?excavation ?location ?admin 

WHERE {  
   ?excavation bnwdt:P12 bnwd:Q38 .
    # non-optional and restrict to uk excavations
    ?excavation bnwdt:P2 ?location .
      ?location bnwdt:P2*/bnwdt:P33* bnwd:Q1741 .  # in UK. 
      ?location bnwdt:P2*/bnwdt:P33 ?admin .  # the admin. get a multi (hadrians wall in both scot and eng).
}'

excavations_admin_query <-
  bn_std_query(excavations_admin_sparql) |>
  make_bn_ids(c(excavation, location, admin))




## excavation>participants  ####

## all directors and members in excavation pages; drop a few duplicate rows 
## this should now be complete except for omitting a few people in marginal "excavations" and some "members" who are also directors.

# haven't reduced roles
bn_excavations_participants <-
  bn_excavations_main_query |>
  filter(prop %in% c("P36", "P37"))  |>
  # a few <uv> which seem to be unnamed groups; turn into NA
  mutate(across(c(value, valueLabel) , ~if_else(str_detect(., "^(_:)?t\\d+$"), NA, . ) )) |>
  ## give unnamed people unique IDs
  ## mutate(person_rn = if_else(value=="Q576", paste(value, row_number(), sep="_"), value)) |>
  ## women only for this... probably? perhaps you should keep male directors at least. but probably only have resided for women anyway.
  #semi_join(bn_gender |> select(person, gender), by=c("value"= "person")) |>
  semi_join(bn_women_list, by=c("value"="bn_id")) |>
  select(excavation, excavationLabel, person=value, personLabel=valueLabel, roleLabel= propLabel, role= prop, s) |>
  # drop a couple of dups
  group_by(person, role, excavation) |>
  top_n(1, row_number()) |>
  ungroup() 



```



```{r resided-at}
resided_sparql <-
'SELECT distinct ?person ?personLabel ?residedLabel ?geo ?long ?lat ?date ?date_prop 
 ?s ?resided 


WHERE {
  ?person bnwdt:P3 bnwd:Q3 .
   FILTER NOT EXISTS {?person bnwdt:P4 bnwd:Q12 .} 
  
  # P29 resided at
  ?person bnp:P29 ?s .
    ?s bnps:P29 ?resided . 
  
  #  ?s ?pq ?qual .
  #  ?qual_prop wikibase:qualifier ?pq .
  
   #optional { ?s bnpq:P31 ?address_text . }
   #optional { ?s bnpq:P100 ?address_item . }
   optional { ?s bnpq:P153 ?geo . 
     BIND(geof:longitude(?geo) AS ?long) .
     BIND(geof:latitude(?geo)  AS ?lat) .
   }
  
   optional { 
     ?s ( bnpq:P1 | bnpq:P27 | bnpq:P28 ) ?date .
     ?s ?date_prop ?date .
     }
  
#  optional {?s bnpq:P55 ?sourcing .}
  
#  optional {?s bnpq:P47 ?note .}
  
  SERVICE wikibase:label {
      bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en,en-gb".
    }
}'

resided_query <-
  bn_std_query(resided_sparql) |>
  make_bn_item_id(person) |>
  make_bn_ids(c(resided, date_prop, s)) |>
  mutate(across(c(geo, date, date_prop), ~na_if(., ""))) |>
  make_date_year() |>
  mutate(date_prop_label = date_property_labels(date_prop)) |>
  filter(year < 2022 | is.na(year)) 

# residences need to be limited to UK as well!
resided <-
resided_query |>
#only six resided at don't join localities, jus drop them.
  inner_join(locality_long_lat |> select(locality, llong=long, llat=lat), by=c("resided"="locality")) |>
  mutate(long = case_when(
    !is.na(long) ~ long,
    .default = llong
  )) |>
  mutate(lat = case_when(
    !is.na(lat) ~ lat,
    .default = llat
  )) |>
  relocate(s, person, .after = last_col())   |>
  inner_join(bn_regions_localities_query |> distinct(resided=item, regionLabel), by=c("resided")) 


resided_dated <-
	resided |>
	filter(!is.na(year))

# excavation participants with residence only
bn_participants <-
  bn_excavations_main_query |>
  filter(prop %in% c("P36", "P37"))  |>
  semi_join(bn_women_list, by=c("value"="bn_id")) |>
  distinct(excavation, excavationLabel, person=value, personLabel=valueLabel, roleLabel= propLabel, role= prop) |>
  # if both roles on an excavation, keep only P36. no difference apparently...
  group_by(person, excavation) |>
  arrange(role, .by_group = T) |>
  top_n(-1, row_number()) |>
  ungroup() |>
  semi_join(resided, by=c("person"="bn_id"))
```



```{r}
# and no point in keeping excavations that don't have any participants with residences...
# but will need to be careful about order of code if you're doing stuff like this!

bn_excavations <-
bn_excavations_main_query |>
  distinct(excavation, excavationLabel, locationLabel, location, long, lat) |>
  #left_join(bn_excavations_all_covering_dates |> select(excavation, year1), by="excavation") |>
  semi_join(bn_participants, by="excavation")


#m2m
bn_participants_residences <-
bn_participants |>
  # drop dates for the moment as there are multis.
  inner_join(resided |> distinct(person=bn_id, long, lat, residedLabel, resided, regionLabel), by=c("person"), relationship = "many-to-many")


bn_excavations_regions <-
bn_excavations |>
  left_join(excavations_admin_query |> distinct(excavation, admin), by="excavation") |>
  left_join(bn_regions_localities_query |> select(admin=item, regionLabel), by=c("admin")) |>
  # two have no admin terr so needs fixing. both are scot.
  mutate(regionLabel = case_when(
    is.na(regionLabel) & excavation %in% c("Q3717", "Q4250") ~ "Scotland",
    .default = regionLabel
  ))
  


# Create a palette that maps factor levels to colors
pal_colours <- c("#D55E00", "#0072B2") # so you can reuse it in the legend function
pal <- colorFactor(pal_colours, domain = c("excavation", "person"))


# function for legend.

myLegend <- function(m) {
  addLegend(
    map=m,
    position = "topright",
    colors = pal_colours,
  labels = c("excavation", "residence"), 
  opacity = 1,
  title = "circle type"
  )
}

```

Using NUTS Regions:

Midlands are grouped with north of England as there are so few, and Northern Ireland is lumped in with Scotland.

```{r}
bn_excavations_regions |>
  count(regionLabel) |>
  kable() |>
  kableExtra::kable_styling()
```




```{r excavations-regions-participants}


bn_excavations_sw_england <-
bn_excavations_regions |> 
  filter(regionLabel %in% c("South West England")) |>
  mutate(popup = glue("{excavationLabel}", "{locationLabel}", .sep="<br/>")) |>
  mutate(id = excavation) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}"))

bn_participants_sw_england <-
bn_participants_residences |> 
  semi_join(bn_excavations_sw_england, by="excavation") |>
  rename(locationLabel=residedLabel, location=resided) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}")) |>
  mutate(popup = glue("{personLabel}", "{excavationLabel}", "{roleLabel}", "residence: {locationLabel}", .sep="<br/>")) |>
  mutate(id = paste(person, excavation, location, sep = "-")) # should be unique

bn_excavations_residences_sw_england <-
bind_rows(bn_excavations_sw_england, bn_participants_sw_england) |>
  mutate(type = case_when(
    is.na(roleLabel) ~ "excavation",
    .default = "person"
  )) |>
  mutate(name = case_when(
    !is.na(personLabel) ~ personLabel,
    .default = excavationLabel
  )) |>
  rename(place = locationLabel) |>
  select(name, type, long, lat, place, popup, excavationLabel, excavation, location, person, role, roleLabel, regionLabel, id, excavation_group) 


# https://martinctc.github.io/blog/vignette-write-and-read-multiple-excel-files-with-purrr/
# Split: one data frame per grp
# assign the data frames to a list object called list_of_dfs:

bn_excavations_residences_sw_england |>
  group_split(excavation_group) -> list_of_sw_england_excavations

# list_of_p101_with_grp |>
#   map(~pull(., grp)) |>
#   map(~unique(.)) -> names(list_of_p101_with_grp)

# Use the value from the "group" column to provide a name for the list members
list_of_sw_england_excavations |>
   map(~pull(.,excavation_group)) |>
   map(~unique(.)) -> names(list_of_sw_england_excavations) # Set this as names for list members





bn_excavations_se_england <-
bn_excavations_regions |> 
  filter(regionLabel %in% c("South East England")) |>
  mutate(popup = glue("{excavationLabel}", "{locationLabel}", .sep="<br/>")) |>
  mutate(id = excavation) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}"))

bn_participants_se_england <-
bn_participants_residences |> 
  semi_join(bn_excavations_se_england, by="excavation") |>
  rename(locationLabel=residedLabel, location=resided) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}")) |>
  mutate(popup = glue("{personLabel}", "{excavationLabel}", "{roleLabel}", "residence: {locationLabel}", .sep="<br/>")) |>
  mutate(id = paste(person, excavation, location, sep = "-")) # should be unique

bn_excavations_residences_se_england <-
bind_rows(bn_excavations_se_england, bn_participants_se_england) |>
  mutate(type = case_when(
    is.na(roleLabel) ~ "excavation",
    .default = "person"
  )) |>
  mutate(name = case_when(
    !is.na(personLabel) ~ personLabel,
    .default = excavationLabel
  )) |>
  rename(place = locationLabel) |>
  select(name, type, long, lat, place, popup, excavationLabel, excavation, location, person, role, roleLabel, regionLabel, id, excavation_group) 


# https://martinctc.github.io/blog/vignette-write-and-read-multiple-excel-files-with-purrr/
# Split: one data frame per grp
# assign the data frames to a list object called list_of_dfs:

bn_excavations_residences_se_england |>
  group_split(excavation_group) -> list_of_se_england_excavations

# list_of_p101_with_grp |>
#   map(~pull(., grp)) |>
#   map(~unique(.)) -> names(list_of_p101_with_grp)

# Use the value from the "group" column to provide a name for the list members
list_of_se_england_excavations |>
   map(~pull(.,excavation_group)) |>
   map(~unique(.)) -> names(list_of_se_england_excavations) # Set this as names for list members





# include midlands since there are hardly any
bn_excavations_north_england <-
bn_excavations_regions |> 
  filter(regionLabel %in% c("North West England", "North East England", "Yorkshire and the Humber", "East Midlands", "West Midlands")) |>
  mutate(popup = glue("{excavationLabel}", "{locationLabel}", .sep="<br/>")) |>
  mutate(id = excavation) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}"))

bn_participants_north_england <-
bn_participants_residences |> 
  semi_join(bn_excavations_north_england, by="excavation") |>
  rename(locationLabel=residedLabel, location=resided) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}")) |>
  mutate(popup = glue("{personLabel}", "{excavationLabel}", "{roleLabel}", "residence: {locationLabel}", .sep="<br/>")) |>
  mutate(id = paste(person, excavation, location, sep = "-")) # should be unique

bn_excavations_residences_north_england <-
bind_rows(bn_excavations_north_england, bn_participants_north_england) |>
  mutate(type = case_when(
    is.na(roleLabel) ~ "excavation",
    .default = "person"
  )) |>
  mutate(name = case_when(
    !is.na(personLabel) ~ personLabel,
    .default = excavationLabel
  )) |>
  rename(place = locationLabel) |>
  select(name, type, long, lat, place, popup, excavationLabel, excavation, location, person, role, roleLabel, regionLabel, id, excavation_group) 


# https://martinctc.github.io/blog/vignette-write-and-read-multiple-excel-files-with-purrr/
# Split: one data frame per grp
# assign the data frames to a list object called list_of_dfs:

bn_excavations_residences_north_england |>
  group_split(excavation_group) -> list_of_north_england_excavations

# list_of_p101_with_grp |>
#   map(~pull(., grp)) |>
#   map(~unique(.)) -> names(list_of_p101_with_grp)

# Use the value from the "group" column to provide a name for the list members
list_of_north_england_excavations |>
   map(~pull(.,excavation_group)) |>
   map(~unique(.)) -> names(list_of_north_england_excavations) # Set this as names for list members



bn_excavations_scotland <-
bn_excavations_regions |> 
  filter(regionLabel %in% c("Scotland", "Northern Ireland")) |>
  mutate(popup = glue("{excavationLabel}", "{locationLabel}", .sep="<br/>")) |>
  mutate(id = excavation) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}"))

bn_participants_scotland <-
bn_participants_residences |> 
  semi_join(bn_excavations_scotland, by="excavation") |>
  rename(locationLabel=residedLabel, location=resided) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}")) |>
  mutate(popup = glue("{personLabel}", "{excavationLabel}", "{roleLabel}", "residence: {locationLabel}", .sep="<br/>")) |>
  mutate(id = paste(person, excavation, location, sep = "-")) # should be unique

bn_excavations_residences_scotland <-
bind_rows(bn_excavations_scotland, bn_participants_scotland) |>
  mutate(type = case_when(
    is.na(roleLabel) ~ "excavation",
    .default = "person"
  )) |>
  mutate(name = case_when(
    !is.na(personLabel) ~ personLabel,
    .default = excavationLabel
  )) |>
  rename(place = locationLabel) |>
  select(name, type, long, lat, place, popup, excavationLabel, excavation, location, person, role, roleLabel, regionLabel, id, excavation_group) 


# https://martinctc.github.io/blog/vignette-write-and-read-multiple-excel-files-with-purrr/
# Split: one data frame per grp
# assign the data frames to a list object called list_of_dfs:

bn_excavations_residences_scotland |>
  group_split(excavation_group) -> list_of_scotland_excavations

# list_of_p101_with_grp |>
#   map(~pull(., grp)) |>
#   map(~unique(.)) -> names(list_of_p101_with_grp)

# Use the value from the "group" column to provide a name for the list members
list_of_scotland_excavations |>
   map(~pull(.,excavation_group)) |>
   map(~unique(.)) -> names(list_of_scotland_excavations) # Set this as names for list members




bn_excavations_wales <-
bn_excavations_regions |> 
  filter(regionLabel=="Wales") |>
  mutate(popup = glue("{excavationLabel}", "{locationLabel}", .sep="<br/>")) |>
  mutate(id = excavation) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}"))


bn_participants_wales <-
bn_participants_residences |> 
  semi_join(bn_excavations_wales, by="excavation") |>
  rename(locationLabel=residedLabel, location=resided) |>
  mutate(excavation_group=glue("{excavationLabel} {excavation}")) |>
  mutate(popup = glue("{personLabel}", "{excavationLabel}", "{roleLabel}", "residence: {locationLabel}", .sep="<br/>")) |>
  mutate(id = paste(person, excavation, location, sep = "-")) # should be unique

bn_excavations_residences_wales <-
bind_rows(bn_excavations_wales, bn_participants_wales) |>
  mutate(type = case_when(
    is.na(roleLabel) ~ "excavation",
    .default = "person"
  )) |>
  mutate(name = case_when(
    !is.na(personLabel) ~ personLabel,
    .default = excavationLabel
  )) |>
  rename(place = locationLabel) |>
  select(name, type, long, lat, place, popup, excavationLabel, excavation, location, person, role, roleLabel, regionLabel, id, excavation_group) 


# https://martinctc.github.io/blog/vignette-write-and-read-multiple-excel-files-with-purrr/
# Split: one data frame per grp
# assign the data frames to a list object called list_of_dfs:

bn_excavations_residences_wales |>
  group_split(excavation_group) -> list_of_wales_excavations

# Use the value from the "group" column to provide a name for the list members
# list_of_wales_excavations |>
#    map(~pull(.,excavation_group)) |>
#    map(~unique(.)) -> names(list_of_wales_excavations) # Set this as names for list members

```



```{r map-functions}

# Create a palette that maps factor levels to colors
pal_colours <- c("#D55E00", "#0072B2") # so you can reuse it in the legend function
pal <- colorFactor(pal_colours, domain = c("excavation", "person"))


# function for legend.
bn_legend <- function(m) {
  addLegend(
    map=m,
    position = "topright",
    colors = pal_colours,
  labels = c("excavation", "residence"), 
  opacity = 1,
  title = "circle type"
  )
}

# function for layers control
bn_layers <- function(m, df){
  m |>
    addLayersControl(
    overlayGroups = df$excavation_group, 
    options = layersControlOptions(collapsed = TRUE)
  )  
}

# function for markers only

bn_excavations_markers <- function(list){
  m <- 
  leaflet(width = "100%", height = 750) |>
  addTiles()
  
  for(i in list){
    m <- m |> addCircleMarkers(data=i, lat = ~lat, lng=~long, 
                      layerId = ~id, 
                      radius = ~ifelse(type == "person", 6, 8), 
                      group = ~excavation_group, 
                      popup = ~popup, 
                      color=~pal(type), 
                      opacity = 0.6, fillOpacity = 0.3
                      )
  }
  m
}


# function to make map with all the controls
bn_excavations_map <- function(df){
  
  m <- 
  leaflet(width = "100%", height = 750) |>
  addTiles()
  
  
  df |>
  group_split(excavation_group) -> list
  
  df_group <-
  df |>
  distinct(excavation_group)

# Use the value from the "group" column to provide a name for the list members
list |>
   map(~pull(.,excavation_group)) |>
   map(~unique(.)) -> names(list) # Set this as names for list members
  
# now the loop
  for(i in list){
    m <- m |> addCircleMarkers(data=i, lat = ~lat, lng=~long, 
                      layerId = ~id, 
                      radius = ~ifelse(type == "person", 6, 8), 
                      group = ~excavation_group, 
                      popup = ~popup, 
                      color=~pal(type), 
                      opacity = 0.6, fillOpacity = 0.3
                      )
  }
  m |>
    bn_legend() |>
    bn_layers(df_group) 
}

```


## North of England and Midlands

```{r}
bn_excavations_residences_north_england |>
  bn_excavations_map() 
```


```{r}
# leaflet(
#     width = "100%",
#     height = 750
#     ) |>
#    addTiles() |> # modern base layer 
#   # add using [1][[1]] instead of names.
#    addCircleMarkers(data = list_of_north_england_excavations[1][[1]], lat = ~lat, lng=~long, layerId = ~id, radius = ~ifelse(type == "person", 6, 8), group = ~excavation_group, popup = ~popup, color=~pal(type), opacity = 0.6, fillOpacity = 0.3 ) |>
#    addCircleMarkers(data = list_of_north_england_excavations[2][[1]], lat = ~lat, lng=~long, layerId = ~id, radius = ~ifelse(type == "person", 6, 8), group = ~excavation_group, popup = ~popup, color=~pal(type), opacity = 0.6, fillOpacity = 0.3 ) |>
#    addCircleMarkers(data = list_of_north_england_excavations[3][[1]], lat = ~lat, lng=~long, layerId = ~id,radius = ~ifelse(type == "person", 6, 8), group = ~excavation_group, popup = ~popup, color=~pal(type) , opacity = 0.6, fillOpacity = 0.3) |>
#    addCircleMarkers(data = list_of_north_england_excavations[4][[1]], lat = ~lat, lng=~long, layerId = ~id, radius = ~ifelse(type == "person", 6, 8), group = ~excavation_group, popup = ~popup, color=~pal(type) , opacity = 0.6, fillOpacity = 0.3) |>
#   addCircleMarkers(data = list_of_north_england_excavations[5][[1]], lat = ~lat, lng=~long, layerId = ~id, radius = ~ifelse(type == "person", 6, 8), group = ~excavation_group, popup = ~popup, color=~pal(type) , opacity = 0.6, fillOpacity = 0.3) |>
#   addCircleMarkers(data = list_of_north_england_excavations[6][[1]], lat = ~lat, lng=~long, layerId = ~id, radius = ~ifelse(type == "person", 6, 8), group = ~excavation_group, popup = ~popup, color=~pal(type), opacity = 0.6, fillOpacity = 0.3) |>
#   addCircleMarkers(data = list_of_north_england_excavations[7][[1]], lat = ~lat, lng=~long, layerId = ~id, radius = ~ifelse(type == "person", 6, 8), group = ~excavation_group, popup = ~popup, color=~pal(type) , opacity = 0.7, fillOpacity = 0.3) |>
#   
#  # addCircleMarkers(data = list_of_north_england_excavations[8][[1]], lat = ~lat, lng=~long, layerId = ~id, radius = ~ifelse(type == "person", 6, 8), group = ~excavation_group, popup = ~popup, color=~pal(type), opacity = 0.6, fillOpacity = 0.3 ) |> # can't have too many.
#    addLayersControl(
#     overlayGroups = bn_excavations_north_england$excavation_group, # assume will only work if you have all the groups! otherwise you have to do stuff like c("Q1856", "Q3717"),
#     options = layersControlOptions(collapsed = FALSE)
#   ) |>
#   myLegend()


```


## Scotland and Northern Ireland


```{r}
bn_excavations_residences_scotland |>
  bn_excavations_map() 

```


## Wales


```{r}
bn_excavations_residences_wales |>
  bn_excavations_map() 

```


## South West England

Because the last two regions are much larger groups and unchecking 20-odd layers would be tedious, the map view starts with just a handful of excavations selected.

```{r}
sw_include <- c(bn_excavations_residences_sw_england$excavation_group[1],
                bn_excavations_residences_sw_england$excavation_group[5],
                bn_excavations_residences_sw_england$excavation_group[11],
                bn_excavations_residences_sw_england$excavation_group[15],
                bn_excavations_residences_sw_england$excavation_group[20])

bn_excavations_residences_sw_england |>
  bn_excavations_map()  |>
  # this hides all. 
  hideGroup(bn_excavations_residences_sw_england$excavation_group) |>
  # and then this shows the selected
  showGroup(sw_include)
```

## South East England


```{r}
se_include <- c(bn_excavations_residences_se_england$excavation_group[1],
                bn_excavations_residences_se_england$excavation_group[5],
                bn_excavations_residences_se_england$excavation_group[11],
                bn_excavations_residences_se_england$excavation_group[15],
                bn_excavations_residences_se_england$excavation_group[20])


bn_excavations_residences_se_england |>
  bn_excavations_map()  |>
  # this hides all. 
  hideGroup(bn_excavations_residences_se_england$excavation_group) |>
  # and then this shows the selected
  showGroup(se_include)
```





