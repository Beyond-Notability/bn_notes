---
title: "Work in progress: notes on dates"
author: "Sharon Howard"
description: "Why are dates so hard?"
date: "2023-11-21"
date-modified: today
categories: 
  - dates
execute: 
  warning: false
  message: false
  echo: false 
---

## Wikibase queries

See the [Dates](https://beyond-notability.wikibase.cloud/wiki/Project:SPARQL/examples#Dates) section of the example queries.


```{r}
# shared libraries, functions etc ####

source(here::here("_R/shared.R"))

# any extra libraries will usually go here 
library(ggbeeswarm)

#library(treemapify)

# standard query strings and queries ####

source(here::here("_R/std_queries.R"))




# function to make a named vector of colours for variable values
# must have cols: rowid, group_label, colour_category
# get rows in required order before using this (this sorts by frequency; could make another version for random/uncounted etc) and then add rowid
# grpname is the name of the group in the group col
# grpcols has to be a vector of colour codes
make_named_colours <- function(df, grpname, grpcols){
  df |>
  filter(group_label==grpname) |>
  count(colour_category, sort = TRUE) |>
  rowid_to_column() |>
  left_join(grpcols |> enframe(), by=c("rowid"="name")) |>
  fill(value) |>
  select(colour_category, value) |>
  # turn the df into a named vector with deframe and this can be used in scale_color_manual
  deframe()
}
```




```{r dates-data}
## amazingly this seemed to work fine first time...

source(here::here("_R/dates.R"))


bn_women_dates_death <-
bn_women_dates |>
  filter(date_prop %in% c("P15")) |>
  #add_count(bn_id) |> filter(n>1) |>
  group_by(bn_id) |>
  arrange(date_precision, .by_group = TRUE) |>
  top_n(1, row_number()) |>
  ungroup()

bn_women_dates_birth <-
bn_women_dates |>
  filter(date_prop %in% c("P26")) |>
  #add_count(bn_id) |> filter(n>1) |>
    group_by(bn_id) |>
  arrange(date_precision, .by_group = TRUE) |>
  top_n(1, row_number()) |>
  ungroup()


# all dates for women who have both DOB and DOD... hopefully in the right order
bn_women_dates_birth_death <-
bind_rows(
  bn_women_dates_birth,
  bn_women_dates_death
) |>
  add_count(bn_id) |>
  filter(n==2) |>
  arrange(bn_id) |>
  select(bn_id, date_prop_label, year) |>
  pivot_wider(names_from = date_prop_label, values_from = year) |>
  clean_names("snake") |>
  rename(year_birth=date_of_birth, year_death=date_of_death) |>
  left_join(
    bn_women_dates |>
      filter(!date_prop %in% c("P15", "P26")) |>
      bind_rows(bn_women_dates_birth, bn_women_dates_death) , by="bn_id"
  ) |>
  group_by(bn_id) |>
  arrange(year, date, .by_group = TRUE) |>
  # tweaks to ensure birth date is always 1st and death date is always last...
  # occasional date like resided is same year as birth and sorting can get buggered up. do death as well in case it could happen there too
  mutate(bn_date_id=row_number()+1, l=last(bn_date_id)) |>
  ungroup() |>
  mutate(bn_date_id = case_when(
    date_prop_label=="date of birth" ~ 1,
    date_prop_label=="date of death" ~ l+1,
    .default = bn_date_id
  )) |>
  arrange(bn_id, bn_date_id) |>
  # now redo the numbering
  group_by(bn_id) |>
  mutate(bn_date_id = row_number()) |>
  ungroup() |>
  select(-l) |>
  relocate(bn_date_id, .after = bn_id)




bn_women_dates_subcat <-
bn_women_dates_categories |>
  mutate(subcat = case_when(
    date_prop_label %in% c("date of birth", "date of death") ~ "birth/death",
    # use ppa buckets first. short forms if appropriate. make charitable na
    category=="PPA" & ppa_bucket=="event participation" ~ "events",
    category=="PPA" & ppa_bucket=="charitable/organisational" ~ NA,
    category=="PPA" & ppa_bucket=="no buckets" ~ NA,
    category=="PPA" ~ ppa_bucket,
    category=="personal" ~ category,
    # family and marriage. this is now covered by family category.
    # education - now in ppa or personal. or excluded.
    # category=="education" ~ category,
    category=="family" ~ category,
    
  ))  |>
  
  # group_label instead of group
  mutate(group_label = case_when(
    
    category=="personal" ~ "1 personal",
    category=="family" ~ "2 family",
    subcat=="positions" ~ "3 ppa:positions",
    category=="PPA" ~ "4 ppa:other",
    #.default = "ng" # leave this so you can check for rogue NAs
  )) 
  
  # # for display labels only; don't use in processing. in dates.r but keep here in case that doesn't work out
  # # remove minor variations in name labels: free text v item, EDTF v PIT
  # # don't forget can't use std_ col for joins back to original...
  # mutate(date_prop_label_std = str_trim(str_remove(date_prop_label, "\\((free text|item|EDTF value|PIT value)\\)"))) |>
  # # shorten a few very long labels...
  # mutate(date_prop_label_std = case_when(
  #   date_prop=="P36" ~ "excavation director",
  #   date_prop=="P37" ~ "excavation worker",
  #   date_prop=="P142" ~ "paternal occupation",
  #   date_prop=="P38" ~ "archaeological committee",
  #   date_prop=="P49" ~ "proposed CAS",
  #   date_prop=="P7" ~ "proposed RAI",
  #   date_prop=="P16" ~ "proposed SAL",
  #   date_prop=="P155" ~ "signed RHS personal",
  #   .default = date_prop_label_std
  # ))




bn_women_dates_birth_death_subcat <-
bn_women_dates_birth_death |>
  left_join(bn_women_dates_subcat |> ##select(-date_prop_label) 
              filter(!is.na(subcat)) |>
            distinct(date_prop, date_prop_label_std, section, category, subcat, group_label)
            , by="date_prop") |>
  # make a single colour_category column with value to use in the make colours function
  mutate(colour_category = case_when(
    
    group_label == "4 ppa:other" ~ "ppa",
    .default = date_prop_label_std
  )) |>
  mutate(age = year-year_birth) |>
    mutate(period = case_when(
    between(year_birth, 1815, 1854) ~ "1815-1853",
    between(year_birth, 1855, 1877) ~ "1854-1876",
    between(year_birth, 1878, 1924) ~ "1877-1924"
  )) 

```




```{r colours-vectors}
# to make a palette for use in scale_colour_manual by groups
gg <- c( "g1"= '#CC6677', "g2"= '#DDCC77' , "g3"= '#88CCEE', "g4"= '#882255')

#group 1 = 2 at present. so colour ramp not needed.
#g1 <- c('#abcce6','#4292c6')
g1 <- c("#e57e8e", '#CC6677')
# to convert...
# colorRampPalette(c('#abcce6','#4292c6'))(6)
 
# group 2 = 3. small numbers and needs to be brighter to stand out
#g2 <- c('#F7CB45', '#F6C141', '#F4A736', '#F1932D')
g2 <- c("#e2d17d", "#DDCC77", "#cdc089")

#group 3 = 6 atm. 
#you could probably add the counts programmatically too...
#g3 <- colorRampPalette(c('#c7e9c0','#74c476'))(6)
g3 <- colorRampPalette(c("#9cdeff", "#88CCEE", "#5ca1c1"))(6)

#group 4 = 7 categories . 
#g4 <- colorRampPalette(c('#D9CCE3', "#BA8DB4"))(7)
g4 <- colorRampPalette(c("#882255", "#600037"))(7)


# do this one without the function
# are you sure you want to lump in the bits and pieces with the big categories??? it's ok for now.
group_bd <-
bn_women_dates_birth_death_subcat |>
  #filter(group_label=="ng") |>
  filter(is.na(group_label)) |>
  distinct(colour_category) |>
  # set neutral colour you want for date of birth/death
  mutate(value= "#bbbbbb") |>
  deframe()

# with this method it doesn't matter if there are more colours than props because the join will ignore the extras anyway 
# the important bit is to make sure you have the props in descending order of frequency and to get the colours in appropriate order
# if you always add fill() it also won't matter if there are more props than colours; the small ones at the bottom will just get the same colour

group_1 <-
  bn_women_dates_birth_death_subcat |>
  make_named_colours("1 personal", g1)

group_2 <-
bn_women_dates_birth_death_subcat |>
  make_named_colours("2 family", g2)

group_3 <-
bn_women_dates_birth_death_subcat |>
  make_named_colours("3 ppa:positions", g3)

# group 4 needs tweak to push other ppa to the bottom
# (actually you could generalise this with an "other" value... wouldn't matter if there isn't one. hmm maybe.)
group_4 <-
bn_women_dates_birth_death_subcat |>
  filter(group_label=="4 ppa:other") |>
  count(colour_category) |>
   # make `other ppa` NA
   mutate(n = if_else(colour_category %in% c("other ppa"), NA, n)) |>
   # now sorts to the end of the table because that's what NA does
   arrange(-n) |>
  rowid_to_column() |>
  left_join(g4 |> enframe(), by=c("rowid"="name")) |>
  # don't need fill atm, but again keep as a fall back.
  fill(value) |>
  select(colour_category, value) |>
  # turn the df into a named vector with deframe and this can be used in scale_color_manual
  deframe()


# the final named vector of everything...
grouped_colours_ng <-
  c(group_bd, group_1, group_2, group_3, group_4)

## or everything except ng
grouped_colours <-
  c(group_1, group_2, group_3, group_4)
```


## Experimental visualisations


### Beeswarm plots of activity by age

- every date is a single point
- split women up into three groups by birth date between 1825 and 1924 (there are very few women before/after those dates) 
  - I've adjusted the dates for even size groups rather than equal periods
- only includes women who have both birth and death dates

This is considerably simplified from the first version...

- I've taken out death as well as birth to (I may put women without death dates back in; it'll depend how many data points that adds)
- I've dropped resided at dates and a small number of miscellaneous categories so that it's easier to focus on four main groups of activities:

1. personal
2. marriage/family 
3. work/employment activities 
4. other public and professional activities 


```{r with-death}
# bn_women_dates_birth_death_with_categories |>
#   filter(between(year_birth, 1825, 1914)) |>
#   filter(date_prop_label != "date of birth") |>
#   # mutate(age = year-year_birth) |>
#   # mutate(period = case_when(
#   #   between(year_birth, 1825, 1854) ~ "1825-1854",
#   #   between(year_birth, 1855, 1879) ~ "1855-1879",
#   #   between(year_birth, 1880, 1914) ~ "1880-1914"
#   # )) |>
#   filter(date_prop_label !="date of birth") |>
#   arrange(group) |>
#   ggplot(aes(period, age, colour=colour_category)) +
#   ggbeeswarm::geom_beeswarm(size=1, show.legend = F, method = "center") +  #, corral = "wrap", corral.width = 0.9, cex=0.8
# #  geom_quasirandom(orientation = "y") +
#   scale_colour_manual(values = grouped_colours_ng) +
#   scale_x_discrete(expand=expansion(add=c(0.5,0.5))) +
#   #theme(legend.position = "bottom", aspect.ratio = 5/4) +
#  # theme(aspect.ratio = 6/15) +
#   labs(y=NULL, x="birth period")
```



```{r}
## colour by group if you're adding the breakdown in the interactive
##lower cex makes each swarm narrower so they fit in better; might also mean more overplotting though.
bn_women_dates_birth_death_subcat |>
  filter(between(year_birth, 1815, 1924)) |>
  filter(date_prop_label != "date of birth") |>
  filter(!is.na(group_label)) |>
#  filter(group_label !="ng") |> 
  arrange(group_label, year) |>
  ggplot(aes(period, age, colour=group_label)) +
  ggbeeswarm::geom_beeswarm(size=0.8,  method = "swarm", cex = 0.8) +  #, corral = "wrap", corral.width = 0.9, cex=0.8
  scale_colour_manual(values = c(  '#CC6677', '#DDCC77' , '#88CCEE',  '#882255')) +
  #scale_colour_manual(values = c( '#AA4499','#DDCC77' ,  '#88CCEE',  '#CC6677')) + # almost
  
  #scale_colour_manual(values = grouped_colours) + # if you do it by category
  #scale_x_discrete(expand=expansion(add=c(0.5,0.5))) +
  theme(legend.position = "bottom") +
  guides(colour = guide_legend(override.aes = list(size=4))) +
  labs(y=NULL, x="birth period", colour=NULL)

#ggsave("_test-bees.png", width=7.3, height=4.5)
```



### An interactive version

Usage:

- hover over points for more info in tooltips (todo: other info in the tooltips)
- single-click items in the legend to toggle them off and on individually
- double-click items in the legend to toggle off/on *all the others* (this one seems a bit temperamental sometimes but it does work) 

(Eg double-click on `exhibited at` for a nice contrast, or on `publication` for a reminder about the incompleteness of some of our data.)




```{r}
bn_bees <-
bn_women_dates_birth_death_subcat |>
  filter(between(year_birth, 1815, 1924)) |>
  filter(date_prop_label != "date of birth") |>
  filter(!is.na(group_label)) |>
#  filter(group_label !="ng") |> 
  arrange(group_label, year) |>
  ggplot(aes(period, age, colour=colour_category)) +
  ggbeeswarm::geom_beeswarm(size=0.8, show.legend = F, method = "swarm", cex = 0.8) + 
  scale_colour_manual(values = grouped_colours) +
  labs(y=NULL, x="birth period")

plotly::ggplotly(bn_bees)
```


Legend notes:

- some property names shortened for labels
- some pairs of properties (EDTF/PIT or item/text) consolidated into single categories
- some ppa:other properties also merged into single categories to make them more manageable, and smaller groups into a single "other"






## Notes on some of the complexities

### general concepts

Broadly the main issues are variability in a. precision, b. certainty, c. formatting and d. omission rates. 

Dates are a problem for just about everyone who has to work with them, whether historians or data people. (Sometimes the way that software attempts to deal with the problem makes them a problem for everyone else as well, such as the [notorious eagerness](https://github.com/jennybc/scary-excel-stories) of spreadsheet software to convert into date format *anything* that even remotely resembles a date.)


### wikibase structure and variety

Dates may be recorded as "main" (or top level) values or qualifiers, which need to be queried separately. 

The majority of dates are qualifiers, and there are around 50 different properties for events or activities that might have qualifier dates. That is a *lot* of categories to try to analyse or visualise together.

Then there are several different possible date properties


### datatypes and technical constraints

Main level dates may have one of two different datatypes: [Time](https://www.wikidata.org/wiki/Help:Dates#Time_datatype) (ymdHMS format), which is the built-in Wikibase datatype, or [EDTF](https://www.wikibase.consulting/wikibase-edtf/) ([Extended Date/Time Format](https://www.loc.gov/standards/datetime/)) for "fuzzier" dates. Qualifier dates (so far...) only have the Time datatype.

- Time dates are always stored and exported by the wikibase (and handled by R) in a year-month-day format, even if they've been recorded at a lower level of [precision](https://www.wikidata.org/wiki/Help:Dates#Precision) (eg year only); the precision level is stored separately and has to be specifically queried. (A year-only date, for example, is stored as YYYY-01-01, so without the precision level it's impossible to differentiate it from an actual 1 January date.)
- EDTF dates are exported as text strings which need to be converted to dates separately. So far they've been used in a fairly straightforward way, mirroring the precision levels for Time dates, but they could be much more complex including uncertainty, approximation, date ranges, etc. [This comment is not intended as encouragement.]

If I run a basic union query in the WQS combining Time/EDTF dates in one column, the EDTF dates will be automatically simplified and converted to the same format as Time dates. So if I want to retain the extra information I have to separate out those variables and then re-combine them after processing.


### varying precision/certainty in sources and recording them

For qualifier dates there are five different properties which reflect different ways that dates might have been recorded, or degrees of certainty in interpreting them: `point in time`; `start time`; `end time`; `earliest date`; `latest date`.

  - a pair of start time and end time represents a period of time
  - but often only one of start/end is recorded
  - point in time may represent *either* a discrete short term event or simply a known recorded moment in a longer duration
  - it looks as though latest date can be *very* imprecise
  - (and presumably earliest can be too, though I think there aren't many of them)

<!-- CHECK WHAT HAPPENS TO THE RELATIVE LINK... -->

Dates may not be recorded at all, and [some dates](/posts/exploring-dates-2023-09-13/) are more likely to be recorded than others. 

A date might be missing because it really is completely unknown, or because the project doesn't have time and resources to track down everything (!), or because some sources are work in progress, or simply because of technical issues fetching the data (eg The Bug). 


### data issues

There are occasional apparent inconsistencies in usage on the wikibase which can be difficult to interpret (ie, they could be errors but equally they could be deliberate choices to handle unusual cases): eg at time of writing there is one date for the property `married name` (for Olwen Brogan) and it's not clear why this isn't recorded as `married in`. [Update: this particular example has now been fixed.] I'd emphasise that such inconsistencies seem rare and minor problems.

Occasionally there may be more than one recorded date to choose from (apart from start/end pairs), though I think there are fewer of these now than there were a few months ago. I think this might tend to occur because an event was recorded with different precision/certainty in different sources, so deciding which of the two dates to use (whether by editing the wikibase or filtering one out at the analysis stage) can be a choice between precision and certainty. Most I've seen are in the same year, in which case it's a minor issue.

(Annoyingly, some sparql queries return duplicates, which is a very different data problem from having multiple dates in a statement... but not necessarily immediately obvious to tell apart.)





## Table

This should contain every recorded date for every woman who has both birth and death dates... hopefully in the correct chronological order. 

Start and end times in the same year may not currently always be correctly sorted. More generally, it can be difficult to ensure that dates in the same year but with low or different precision levels come out in the desired order (or even to decide what the desired order in those cases should be).

A year-only date should display as 01/01/year but in some cases below the software package used to render the table is displaying them as 31/12 of the *previous* year, and I have no idea why: the underlying data is fine. (It may only affect certain dates.) I'll work out how to fix it. 

```{r}
reactable(
  bn_women_dates_birth_death |>
  select(-person, -bn_date_id, -year_birth, -year_death, -date_string, -prop_value, -s) ,
  filterable = TRUE,
  searchable = TRUE,
  bordered = TRUE,
  highlight = TRUE,
  defaultPageSize = 100,
  groupBy = c("bn_id", "personLabel"),
  defaultExpanded = TRUE,
  defaultColDef = colDef(maxWidth = 150),  # , headerClass = "sticky" but i think it has to be fixed height to use this
  columns = list(
    #bn_id = colDef(name="id", maxWidth = 75),
    bn_id = colDef(show = FALSE),
    date_prop = colDef(show=FALSE),
    personLabel =colDef(maxWidth = 200, name="name" #,
      # html = TRUE,
      # cell = function(value, index) {
      #   sprintf('<a href="%s" target="_blank">%s</a>', bn_women_dates_birth_death$person[index], value)
      # }
      )   ,
    date_prop_label = colDef(maxWidth = 120, name="property",
      html = TRUE,
      cell = function(value, index) {
        sprintf('<a href="%s" target="_blank">%s</a>', paste(bn_women_dates_birth_death$person[index], bn_women_dates_birth_death$date_prop[index], sep="#"), value)
      }),
    date_precision = colDef(maxWidth = 100, name="precision"),
    prop_valueLabel = colDef(name="qual", maxWidth = 180),
    date = colDef(format = colFormat(date=TRUE), minWidth = 120),
   date_level = colDef(name="level", maxWidth = 90),
   date_label = colDef(name="type", maxWidth = 100),
   date_certainty = colDef(name="other", maxWidth = 100),
   year = colDef(maxWidth = 90)
  )
)
```




